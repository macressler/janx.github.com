Behavior Driven Development

everything started from here: http://techblog.daveastels.com/2005/07/05/a-new-look-at-test-driven-development/

"Also, the idea of “unit” is a major problem. First of all it’s a vague term, and second it implies a structural division of the code (i.e. people think that they have to test methods or classes). We shouldn’t be thinking about units… we should be thinking about facets of behaviour."

"That’s not what we want… we want behavioural divisions.. we want to work at a level of granularity much smaller than that of the typical unit test. As I’ve said before when talking about TDD, we should be working with very small, focused pieces of behaviour… one small aspect of a single method. Things like “after the add() method is called with an object when the list is empty, there should be one thing in the list”. The method is being called in a very specific context, often with very specific argument, and with a very specific outcome."




BDD is in fact the same thing as TDD, but TDD is a misleading word. People usually understand T in TDD as Test/UnitTest, but it isn't. So BDD is TDD with a whole changed vocabulary.

"As the code base gradually increases in size, more and more attention is consumed by the refactoring step. The design is constantly evolving and under constant review, though it is not pre-determined. This process is known as emergent design, and is one of the most significant by-products of Test Driven Development.

This is not a testing practice at all. Instead, the goal of TDD is to deliver high quality code to testers, but it is the testers who are responsible for testing practices (see the Joe Asks. . . on the current page).

And this is where the Test in TDD becomes a problem. Specifically, it is the idea of Unit Testing that often leads new TDD’ers to verifying things like making sure that a register() method stores a Registration in a Registry’s registrations collection, and that collection is specifically an Array.

This sort of detail in a test creates a dependency in the test on the internal structure of the object being tested. This dependency means that if other requirements guide us to changing the Array to a Hash, this test will fail, even though the behaviour of the object hasn’t changed. This brittleness can make test suites much more expensive to maintain, and is the primary reason for test suites to become ignored and, ultimately, discarded."

Three Practises of BDD:

  * Acceptance Test Driven Planning - extension of Acceptance Test Driven Development. The difference between the two is simple. ATDD specifies that we write acceptance tests before we write code, but it doesn’t otherwise specify when in the process we should write them.  ATDP specifies that the acceptance tests are agreed on during or possi- bly before, but no later than, an interation planning meeting. This lets us consider the acceptance criteria in our estimates, which improves our ability to plan iterations, hence the the name Acceptance Test Driven Planning.

  * Domain Driven Design

  * Test Driven Development

User stories are a planning tool, it must:

  * have business value
  * be testable
  * be small enough to implement in one iteration

Use role+action format for feature title, like 'code-breaker starts game'


Rspec is specifications for objects, Cucumber is specifications for the whole application.

Behavior: as(who), want(what), so(why)
Scenario: given(context)/and, when(input), then(output)

Dir Structure
|- bin
|- features
   |- step_definitions
   |- support
      |- env.rb
|- lib
   |- <project_name>.rb    # require files in <project_name> dir
   |- <project_name>
      |- <source files...>
|- spec
   |- spec_helper.rb
   |- <project_name>.rb
   |- <project_name>


ONE EXPECTATION PER EXAMPLE: The rationale here is that if there are two expectations in an example that should both fail given the implementation at that moment, we’ll only see the first failure. No sooner do we meet that expectation than we discover that we haven’t met the second expectation. If they live in separate exam- ples, then they’ll both fail, and that will provide us with more accurate information than if only one of them is failing.

Refactoring is the process of changing a software system in such a way that it does not alter the external behaviour of the code yet improves its internal structure. - Martin Fowler


Cucumber scenario outlines is inspired by FIT. It's kinda like fixtures for features.

BDD is a design practice, not a testing practice. We need exploratory testing because just as Big Design Up Front fails to allow for discovery of features and designs that naturally emerge through iterative development, so does driving out behaviour with examples fail to unearth all of the corner cases that we’ll naturally discover by simply using the software.

Refactoring step definitions and code examples, keeping in mind that expressiveness and localization are key factors in keeping them maintainable.

Refactoring in the Green: only refactor when all of your examples are passing.

*Enough up-front thinking* is BDD’s response to this. It says you should do enough up-front planning, analysis, and design but no more. So then on a software project how much is enough? The word is intentionally subjective: it will vary from team to team and project to project. One way to think about enoughis to ask whether the team feels safe to continue.

We have two complementary strategies here: we can try to reduce the likelihood of something going wrong, or mitigate its impact. Most tradi- tional project management focuses on the former, which is why there is so much emphasis on the up-front planning and analysis. We want to identify every possible risk so we are more likely to spot the dangerous ones.

Our approach is to place more emphasis on the latter aspect and become good at minimizing the impact of something going wrong. This tech- nique, that The Pragmatic Programmer [HT00] calls failing fast, allows us to experiment with lots of different ideas because we know that if it goes wrong it won’t be that big of a deal. This approach speaks to the Extreme Programming values of courage and feedback: you can be more courageous when you know the stakes aren’t as high, and you can find out quickly whether or not something is a good idea.

In BDD terms a stakeholder is anyone who cares about the work we are undertaking, whether they are the people whose problem we are trying to solve — the core stakeholders — or the people who are going to help solve it — the incidental stakeholders.

vision/purpose of project -> outcomes/goals -> feature-sets/themes -> features/stories

You don’t have to work in iterations, and if you do they don’t have to be one week long. We have seen teams using iterations lasting from half a day (no, really!) to four weeks. Some teams don’t use iterations at all, but have a constant flow of stories that they track using techniques borrowed from Lean manufacturing, such as kanban flow control and finger charts. The important thing is to ensure you have regular feedback from your stakeholders and a way of measuring throughput.


A story is made up of a number of components:

  * A title so we know which story we are talking about

  * A narrative which tells us what this story is about. There are a couple of common formats for this, but you can use anything that captures the essentials. At the very least it should identify the stakeholder for this story, a description of the feature they want, and the reason they want it—the benefit they expect to gain by us delivering this behaviour.  The most common format for this is known as the Connextra for- mat, after the company where it was first used: As a [stakeholder], I want [feature]so that [benefit] A recent variant that is becoming popular looks like this: In order to [benefit], a [stakeholder] wants to [feature]. The content is exactly the same but there is a subtle shift in emphasis by putting the benefit first. It helps keep the focus on the outcome rather than the detail of the feature.

  * Acceptance criteria so we know when we are done. In BDD, the accep- tance criteria take the form of a number of scenarios made up of individual steps.

Although the whole team should be involved in all aspects of fleshing out the story, it is the business analyst3 who “owns” the story title and narrative, and the acceptance criteria is “owned” by the tester, or rather by someone in the tester role.

Jan: Given/When/Then = Context/Input/Output


The Three Principles of BDD:

* It’s all behaviour We want Business and Technology people using the same words to refer to the same ideas. You shouldn’t need a trans- lator between the stakeholders and the development team.

* Deliver stakeholder value If you are doing something that isn’t either delivering value or increasing your ability to deliver value, stop doing it.

* Enough is enough Up-front planning, analysis, and design all have a diminishing return. We shouldn’t do less than we need to get started, but any more than that is wasted effort. This also applies to process automation. Have an automated build and deployment, but don’t get sucked into trying to automate everything.


A 'mock object' pretends to be another object. In recent years, the term mock object has taken on a more specific meaning, so we use the general term test double (think stunt double in a movie) to refer to any object that stands in for another.

A Test Stub, or just Stub, is a type of test double that we can program to return pre-defined responses to messages during the execution of a code example.

Mock Objects, or just Mocks, are an extension of Test Stubs. Like stubs, we can program mocks to return pre-determined responses when they receive various messages, or method calls. Unlike stubs, mocks have an additional functionality that makes them different from stubs in their usage and impact on how we drive out behaviour. Mock Objects allow us to set expectations on them.

With mock objects we can specify what methods should be called during the execution of an example, what arguments should be provided, how many times they should be called, in what order, and so on. *** These expectations are then verified at the end of the example. ***

Why method stubs?

  * Isolation from Dependencies
  * Isolation from Non-Determinism
  * Making Progress Without Implemented Dependencies

Why message expectations?

  * Interface discovery
  * Focus on roles
  * Focus on interaction

Common pitfalls when using doubles

* Over-Specification: mock objects should make it easy to setup the context for our examples. If we need a bunch of mocks in one example, it's time to reeval the design ..

* Nested Mocks: mocks should be shallow as well. While not all methods that we specify on mocks need to return values, many do. When they do it's generally best if the return value is a simple value: a language primitive or a value object. One exception to this guideline is when we want to introduce a mock through a query (e.g. make ActiveRecord::Base.find returns a mock) When we do find it necessary to nest mocks, it's quite often a sign that we're working with a pre-existing design that may have some coupling problems. A general rule of thumb is that if the code is hard to use in examples, it's going to be hard to use everywhere else.

* Absence of Converage: One goal of BDD (and TDD) is to develop confidence in the system by taking small, verifiable steps, and building up a suite of regression tests as we go. When we’re using mock objects in dynamic languages like Ruby, it is possible to change an object’s API and forget to change the examples that mock that same API.  The result can be that all of our examples pass, yet when we start up the application, the wheels fall off right away because one object is sending the wrong message to another. There is little that can knock our confidence in our system more than finding such a gaping hole in our regression test suite.  One remedy for this situation is to have some higher level of automated testing in place. In BDD, we start with automated acceptance criteria before we even start developing objects, so this should not be an issue.  Even if we forget to change the API on a mock, the automated scenar- ios should catch any problems we’ve introduced very shortly after we introduce them.  But, to the extent that we do not follow this practice, we also increase the risk of getting false-positive feedback from our specs.

Brittle examples: The biggest pitfall of over-use of mocks is that examples can become brittle. The more we specify about interactions with dependencies in an example, the more likely that example will be impacted by changes to other code in the system. This is the same impact that any highly coupled code has on a system.  This brittleness is more likely to emerge when back-filling examples onto existing code that is already highly coupled. Mocks can be helpful in this situation if we listen to them. If mocks are painful to set up, it’s a red flag that the design might be too highly coupled.  When we’re using mocks as intended, to discover new roles and APIs, there is a natural tendency for them to be simple and usable because we’re working from the client perspective. This becomes somewhat of a self-fulfilling prophecy. We want our mocks to be simple to set up, and so they are. And when they are simple to set up, the resulting code is generally more highly decoupled.


Rails and BDD
=============

Traditional rails development style is inside-out (from model to view), BDD way is outside-in (from view to model)

We need 4 gems: rspec, rspec-rails, cucumber, webrat

script/generate cucumber
script/generate rspec

Cucumber can replace rails' integration tests. In fact Cucumber::Rails::World, which is the primary building block of Cucumber's support for rails, is subclass of ActionController::IntegrationTest. Each scenario will run in a newly instantiated Cucumber::Rails::World. This gives us access to all of the functionality of Rails' Integration tests and RSpec's Rails-specific matchers, including simulating requests to the application and specifying behaviour with RSpec expectations.

Since Cucumber step definitions execute in the context of a Rails environment, you can use any techniques that work in Rails unit tests or RSpec model specs (but you can't use mocking and stubbing). 

In the default configuration, it will also cause each scenario to run in an isolated DB transaction, just like RSpec code examples. You can disable this by removing the following line from the RAILS_ROOT/features/support/env.rb generated by Cucumber:

  Cucumber::Rails.use_transactional_fixtures

We shouldn't express technical details in cucumber features, we should express them in step definitions. There's typically three step definition styles in Rails:

  * Direct Model Access: Access the ActiveRecord models directly (like model specs) while skipping the routing, controllers, and views. This is the fastest but least integrated style. It deliberately avoids the other layers of the Rails stack.

  * Simulated Browser: Access the entire MVC stack using Webrat, a DSL for interacting with web applications. This style provides a reliable level of integration while remaining fast enough for general use, but doesn't exercise JavaScript at all.

  * Automated Browser: Access the entire Rails MVC stack and a real web browser by driving interactions with the Webrat API and its support for piggy-backing on Selenium. This style is fully integrated but can be slow to run and cumbersome to maintain.

Suggestions:

use Direct Model Access in Givens to prepare the state of the system, except for logging-in or other actions that set up browser session state. Whens and Thens execute against the full Rails stack using Webrat as a Simulated Browser. This provides confidence that all of the component parts are working well together but still produces a suite that can be executed relatively quickly and without depending on a real web
browser.

If there is any JavaScript or AJAX, I’ll add scenarios that use the Automated Browser approach in their Whens and Thens for the happy path and critical less common paths. The added value we get from doing this is exercising client side code, so when no client code is necessary, there is no reason to use the browser.

Lastly, for features that produce many edge cases, it can be useful to drive a few through the Rails stack and the rest using just Direct Model Access for everything. This may seem more like a unit test, but keep in mind that scenarios are about communication, not just coverage. We want to make sure that we’re writing the right code. If the customer asks for specific error messages depending on a variety of error condi- tions, then it’s OK to go right to the model if that’s the source of the message, as long as we have confidence that the relevant slice of the full stack is getting sufficient coverage from our other scenarios.



Rspec and Cucumber and Webrat
=============================

subject code: The code whose behaviour we are specifying with RSpec.

expectation (assertion in TDD): An expression of how the subject code is expected to behave.

code example (test method in TDD): An executable example of how the subject code can be used, and its expected behaviour (expressed with expectations) in a given context. In BDD, we write the code examples before the subject code they document. The example terminology started with Brian Marick, whose website is even named http://exampler.com. Using “example” instead of “test” reminds us that the writing them is a design and documentation practice, even though once they are written and the code is developed against them they become regression tests.

example group (test case in TDD): A group of code examples.

spec, a.k.a. spec file: A file that contains one or more example groups.

Webrat simulates a browser by building on the functionality of the Rails integration testing API, providing an expressive language to describe manipulating a web application.

Webrat actions:

  visit <url>
  click_link <title|id|text>
  fill_in <id|name|label>, :with => <value>
  check
  uncheck
  choose
  select <option>, [:from => <select>]
  select_date <time>, [:id_prefix => <prefix>]
  select_time
  select_datetime
  attach_file <name>, <path>, [<mime type>]
  set_hidden_field
  click_button
  submit_form
  reload

Webrat matchers:

  contain <string|regexp>
  have_selector <selector>[, <:count|:content|attributes hash>] [do ... end]
  have_xpath

All CSS selectors can be expressed as XPath, but not all XPath selectors can be expressed as CSS. So webrat in fact translates have_selector to have_xpath.

example:

  Then /^the Vacation photo should be third in the album$/ do
    response.should have_selector("#album li:nth-child(3)" ) do |li|
      li.should have_selector("img" , :src => photo_path(@vacation_photo))
      li.should contain("Vacation Photo" )
    end
  end

Webrat advances:

  within <selector> do ... end
  field_labeled
  field_named
  field_with_id
  <field object>.value
  <field object>.checked?
  current_url
  header
  http_accept
  basic_auth
  save_and_open_page

Use webrat helpers in views specs:

  config.include Webrat::Matchers, :type => :views

example:

  require File.expand_path(File.dirname(__FILE__) + '/../../spec_helper' )
  describe "messages/show.html.erb" do
    before(:each) do
      @message = stub("Message" )
      assigns[:message] = @message
    end
    it "should display the text of the message" do
      @message.stub!(:text).and_return "Hello world!"
      render "messages/show.html.erb"
      response.should contain("Hello world!" )
    end
  end

Rspec views helpers:

  assigns
  render
  stub
  mock_model
  stub_model

Custom matcher example:

  def have_button(href)
    simple_matcher("a button to #{href}" ) do |response|
      response.should have_selector("a.button" , :href => href)
    end
  end

View specs should focus on semantics, not syntactic details.

A simple guideline for a controller is that it should know what to do, but not how to do it.

We use the context( ) method to express the given context for an example or a group of examples.2 By convention, though not enforced programatically, we express the same given in a before( ) block within the context block.

Rspec controller helpers:

  assigns
  flash
  post
  xhr
  render_template
  redirect_to

Should I spec model associations?

A good rule of thumb is to spec associations when you introduce behaviour beyond what Rails provides by default. Usually, an association is added to a model to serve the
behaviour of code you are working on. When this is the case you’re not introducing behaviour, you’re supporting behaviour, so there is no need to spec the association directly. For example, you may be spec’ing the amount( ) method on the Order model to ensure it returns the sum of line item amounts. To satisfy the spec you need to introduce a has_many :items association. Since the association is being added to support the behaviour of amount( ) there is no need to spec it directly, it’s being covered through the examples on amount. This also applies to the available association options. For example, using the :foreign_key or the :class_name options aren’t introducing behaviour, they’re just wiring up the association, so they are poor candidates to drive with a spec. However, options like :conditions, :dependent, and :finder_sql are capable of introducing behaviour, so they are good candidates to drive with a spec. Not every situation you will encounter will be so cut and dry. When in doubt the above rule of thumb can be a good baseline to determine when to spec an association.


Describe it!
------------

Imagine a conversation between you and a customer/another developer:

  You: Describe a new account
  Somebody else: It should have a balance of zero

translate to rspec dsl:

  describe "A new Account" do
    it "should have a balance of 0" do
      account = Account.new
      account.balance.should == Money.new(0, :USD)
    end
  end

in fact it's the same as:

  class NewAccount < Spec::Example::ExampleGroup
    def should_have_a_balance_of_zero
      account = Account.new
      account.balance.should == Money.new(0, :USD)
    end
  end


* The describe() method: it can take an arbitrary number of arguments and a block, and returns a subclass of Spec::Example::ExampleGroup. describe() can be nested.

The first argument can be either a reference to a Class or Module, or a String. The second argument is optional, and should be a String. Using the class/module for the first argument provides an interesting benefit: when we wrap the ExampleGroup in a module, we’ll see that module’s name in the output. 


Examples
--------

There's 3 ways to pending examples: it() without block, put pending in example, pending in example with block

We can define helper method in example group, just as defining ordinary methods. We can define helper method in a module and include the module in example groups to share, or include the module by config.include directive in rspec configs to share it globally.

We can share examples by using share_examples_for() and it_should_behave_like() methods, or by share_as() and ruby include.

Inner group in nested example groups is subclass of outer group which is subclass of Spec::Example::ExampleGroup. So all helpers, before/after and modules in outer group can be used in inner group too, and you can share states (instance variables) between them. The order of before/after is outer before -> inner before -> example -> inner after -> outer after.

We need balance the use of describe() and before(). Someone prefer setup all environment in before, someone prefer never setup environment in before, and someone prefer use nested describes to document and it() only express expectation. Anyway, we need a balance between them I think.

We can use specify() method to create an example (specify() without argument), when we want rspec to generate description for us. specify() and it() are both alias of example(), which creates an example.


Expectations
------------

Rspec add should() and should_not() methods to Object class, so all objects have these two methods.

Each rspec's matchers generate a description of itself. If the example/it/specify method doesn't receive a docstring, it uses the last matcher generated description.

object.should expect(value)
  - expect(value) will create a new matcher object
  - should will do matcher.matches?(self)
  - if matches? returns true, then we step to next line in example; if it returns false, an ExpectationNotMetException is raised with a message returned by matcher.failure_message_for_should(). should_not() works the opposite way (with message returned by matcher.failure_message_for_should_not).

"should eat_cheese" is an expectation, eat_cheese is a matcher.

* Equality: object equivalence and object identity

  Ruby has four constructs that deal with equality:

    a == b
    a === b
    a.eql? b
    a.equal? b

  It's a complicated system so rspec just copy it:

    a.should == b         # value equality, a and b can be instance of different class, depends on concrete class
    a.should === b
    a.should eql(b)       # a should be same class and same value with b
    a.should equal(b)     # object identity

* Predicate matcher: any methods ending with a ? is a predicate in ruby. Rspec hacks method_missing to add predicate matcher for all predications. You can do array.should be_empty since empty? is a method of array. Valid predicate matcher can start with "be_", "be_a_" or "be_an_"

* Have matcher: There's 4 use of have matcher in rspec: (the collection below refers to any object responds to size or length message)

  1. collection.should have(1).anything # here collection is a collection and 'anything' is just syntax sugar, will be ignored
  2. something.should have(1).anything(args) # here 'something' is not a collection but an object owns a collection, and 'anything' will return the collection
  3. Rspec uses method_missing to turn any matcher start with "have_" to a predicate on the target object beginning with "has_": hash.should have_key(:id) # => hash.has_key?(:id).should be_true
  4. there's have_exactly (alias of have), have_at_least and have_at_most matchers

* Operator matchers:

  result.should == 3
  result.should =~ /some regexp/
  result.should be < 7
  result.should be <= 7
  result.should be > 7
  result.should be >= 7


Subject ivity
-------------

The subject of an example is the object being described. You can setup it in before(), but Rspec also provides a subject() method.

* explicit subject

  describe Person do
    subject { Person.new(:birthdate => 19.years.ago) }
    specify { subject.should be_eligible_to_vote }
  end

* delegation to subject

  describe Person do
    subject { Person.new(:birthdate => 19.years.ago) }
    it { should be_eligible_to_vote }
  end

* implicit subject

  describe RSpecUser do
    it { should be_happy }
  end


Spec command
------------

spec <filename> # when run 1 spec, spec and ruby command is almost the same

spec <dirname> # run all *_spec.rb files under this dir and its subdir, you can config to use other pattern

spec --diff <specs> # show result difference in diff format, require diff-lcs gem

spec --format <format>[:<report path>] <specs>
              * progress
              * specdoc
              * nested: for nested example groups
              * html
              * profile: just like progress, but also outputs 10 slowest examples

spec --require <rspec extension> <specs>

spec --backtrace <specs>

spec --color <specs>

spec --options <options file> <specs>
spec --generate-options <options file> <options> # generate option file for --options

spec --heckle <object> <specs>


Global Configuration
--------------------

Spec::Runner.configure {|config| ...}

We can use following methods:

  * before # alias of append_before
  * append_before # :each, :all, :suite
  * prepend_before
  * after # alias of prepend_after
  * prepend_after
  * append_after
  * include
  * extend
  * mock_with


Custom Example Group
--------------------

module Spec
  module Example
    class ExampleGroup
      extend Spec::Example::ExampleGroupMethods
      include Spec::Example::ExampleMethods
    end
  end
end

So we have 3 ways to custom example group:

  1. subclass Spec::Example::ExampleGroup
  2. write one from scratch and extend/include the modules
  3. reopen some class and extend/include the modules

To use our custom example group, we need to register it:

Spec::Example::ExampleGroupFactory.default(CustomExampleGroup)
Spec::Example::ExampleGroupFactory.register(:key, custom_class)

Registration will make:

  1. describe() always creates sublcass of your custom example group
  2. Spec::ExampleGroup always reference your custom example group

Once registered we can use the custom group in two ways:

  1. describe something, :type => :key do ...
  2. encode type in example file path, like spec/controllers, here 'controllers' will be converted to :controllers and rspec will check whether there's a example group registered with :controllers

If there's no :type information found, describe() will create instance of default group.


Custome Matcher
---------------

* Using matcher DSL

# for joe.should report_to(beatrice), we define the matcher report_to:
Spec::Matchers.define :report_to do |boss|
  match do |employee| # the match block should return a bool value
    employee.reports_to?(boss)
  end

  failure_message_for_should do |employee|
    "expected the team run by #{boss} to include #{employee}"
  end

  failure_message_for_should_not do |employee|
    "expected the team run by #{boss} to exclude #{employee}"
  end

  description do # the description when you don't provide one for example (it with no string)
    "expected a member of the team run by #{boss}"
  end
end

In the event of a failure, the matcher generates a message from its name and the expected and actual values if you don't custom messages by failure_message_for_should/failure_message_for_should_not. In this example the message would be something like this:

  expected <Employee: Joe> to report to <Employee: Beatrice>
  expected <Employee: Joe> not to report to <Employee: Beatrice>

The representation of the employee objects depends on how to_s( ) is implemented on the Employee class, but the matcher gleans “report to” from the Symbol passed to define( ).

* Using matcher protocol

A matcher in RSpec is any object that responds to a specific set of messages. The simplest matchers only need to respond to these two:

  matches?
  failure_message_for_should

optionals:

  failure_message_for_should_not
  description
  does_not_match? # should_not will try this first, it this doesn't exist, should_not will try matches?

example:

class ReportTo
  def initialize(manager)
    @manager = manager
  end

  def matches?(employee)
    @employee = employee
    employee.reports_to?(@manager)
  end

  def failure_message_for_should
    "expected #{@employee} to report to #{@manager}"
  end
end

def report_to(manager)
  ReportTo.new(manager)
end


Macro
-----

(jan: Macros are more implemented with the power of ruby, instead of support from rspec)

example:

module ControllerMacros
 def should_render(template)
    it "should render the #{template} template" do
      do_request
      response.should render_template(template)
    end
 end
 
 def should_assign(hash)
    variable_name = hash.keys.first
    model, method = hash[variable_name]
    model_access_method = [model, method].join('.' )
    it "should assign @#{variable_name} => #{model_access_method}" do
      expected = "the value returned by #{model_access_method}"
      model.should_receive(method).and_return(expected)
      do_request
      assigns[variable_name].should == expected
    end
  end

  def get(action)
    define_method :do_request do
      get action
    end
    yield
  end
end

Spec::Runner.configure do |config|
  config.use_transactional_fixtures = true
  config.use_instantiated_fixtures = false
  config.fixture_path = RAILS_ROOT + '/spec/fixtures/'
  config.extend(ControllerMacros, :type => :controller)
end

describe ProjectsController do
  get :index do
    should_render "index"
    should_assign :projects => [Project, :all]
  end
end


Formatter
---------

To custom output report, define a subclass of Spec::Runner::Formatter::BaseFormatter, hooks are:

  initialize
  start
  example_group_started
  example_started
  example_pending
  example_failed
  example_passed
  start_dump
  dump_failure
  dump_summary
  dump_pending
  close

To run your custom formatter:

  spec spec --require formatters/pdf_formatter --format PdfFormatter:report.pdf
