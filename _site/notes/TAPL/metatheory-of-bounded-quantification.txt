Metatheory of Bounded Quantification
====================================

In this chapter we develop subtyping and typechecking algorithms for F<:. We study both the kernel and the full variants of the system, which behave somewhat differently. Some properties are enjoyed by both but harder to prove for the full variant, while others are lost outright in full F<: - the price we pay for the extra expressiveness of this system.


Exposure
--------

In the typechecking algorithm for the simply typed lambda-calculus with subtyping, the key idea was to calculate a minimal type for each term from the minimal types of its subterms. We can use the same basic idea for F<:, but we need to take into account one small complication arising from the presence of type variables in the system. Consider the term

  f = λX<:Nat->Nat. λy:X. y 5;
  > f : "X<:Nat->Nat. X -> Nat

This term is clearly well typed, since the type of the variable y in the application y 5 can be promoted to Nat->Nat by T-SUB. But the minimal type of y is X, which is not an arrow type. In order to find the minimal type of the whole application, we need to find the smallest arrow type that y possesses - i.e., the minimal arrow type that is a supertype of the type variable X. Not too surprisingly, we can find this type by promoting the minimal type of y until it becomes something other than a type variable.

Formally, we write Г |- S |^ T (pronounced "S exposes to T under Г") to mean "T is the least nonvariable supertype of S." Exposure is defined by repeated promotion of variables, as shown in Figure below:

  X<:T <- Г    Г |-> T |^ T'
  --------------------------    XA-PROMOTE
  Г |-> X |^ T'

  T is not a type variable
  ------------------------    XA-OTHER
  Г |-> T |^ T

It is easy to see that these rules define a total function. Moreover, the result of exposing a type is always the least supertype that has some shape other than a variable.

Lemma [Exposure]: Suppose Г |- S |^ T. Then:
  1. Г |- S <: T.
  2. If Г |- S <: U and U is not a variable, then Г |- T <: U.


Minimal Typing
--------------

The algorithm for calculating minimal types is now built along the same lines as the one for the simply typed lambda-calculus with subtyping, with one additional twist: when we typecheck an application, we calculate the minimal type of the left-hand side and then expose this type to obtain an arrow type, as shown in Figure below. If the exposure of the left-hand side does not yield an arrow type, then rule TA-APP does not apply and the application is ill-typed. Similarly, we typecheck a type application by exposing its left-hand side to obtain a quantified type.

  x:T <- Г
  --------    TA-VAR
  Г |- x:T

  Г,x:T1 |- t2:T2
  ----------------------    TA-ABS
  Г |- λx:T1.t2 : T1->T2

  Г |- t1:T1    Г |- T1 |^ (T11->T12)    Г |- t2:T2    Г |- T2<:T11
  -----------------------------------------------------------------    TA-APP
  Г |- t1 t2 : T12

  Г,X<:T1 |- t2:T2
  ------------------------    TA-TABS
  Г |- λX<:T1.t2:"X<:T1.T2

  Г |- t1:T1    Г |- T1 |^ "X<:T11.T12    Г |- T2<:T11
  ----------------------------------------------------    TA-TAPP
  Г |- t1 [T2] : [X |-> T2]T12

Theorem [Minimal Typing]:
  1. If Г |-> t:T  , then Г |- t:T.
  2. If Г |- t:T, then Г |- t:M with Г |- M<:T.
                
Corollary [Decidability of Typing]: The kernel F<: typing relation is decidable, given a decision procedure for the subtype relation.


Subtyping in Kernel F<:
-----------------------

We remarked that the declarative subtype relation for the simply typed lambda-calculus with subtyping is not syntax directed - i.e., it cannot be read directly as a subtyping algorithm - for two reasons: (1) the conclusions of S-REFL and S-TRANS overlap with the other rules (so, reading the rules from bottom to top, we would not know which one to try to apply), and (2) the premises of S-TRANS mention a metavariable that does not appear in the conclusion (which a naive algorithm would have to somehow "guess"). We saw that these problems can be fixed by simply dropping the two offending rules from the system, but that, before doing so, we must fix up the system a little by combining the three separate record subtyping rules into one.  

For kernel F<:, the story is similar. Again, the offending rules are S-REFL and S-TRANS, and we obtain an algorithm by dropping these rules and fixing up the remaining rules a little to account for the essential uses of the dropped rules.

In the simply typed lambda-calculus with subtyping, there were no essential uses of the reflexivity rule - we could just drop it without changing the set of derivable subtyping statements. In F<:, on the other hand, subtyping statements of the form Г |- X <: X can be proved only by reflexivity. So, when we remove the full reflexivity rule, we should add in its place a restricted reflexivity axiom that applies only to variables.

Similarly, to eliminate S-TRANS, we must first understand which of its uses are essential. Here, the interesting interaction is with the S-TVAR rule, which allows assumptions about type variables to be used in deriving subtyping statements. For example, if Г = W<:Top, X<:W, Y<:X, Z<:Y, then the statement Г |- Z <: W cannot be proved if S-TRANS is removed from the system. An instance of S-TRANS whose left-hand subderivation is an instance of the axiom S-TVAR, as in

Z<:Y <- Г              ...
--------- (S-TVAR)  ----------
Г |- Z<:Y           Г |- Y<:W
------------------------------------ (S-TRANS)
Г |- Z<:W

Fortunately, derivations of this form are the only essential uses of transitivity in subtyping. This observation can be made precise by introducing a new subtyping rule

X<:U <- Г    Г |- U<:T
----------------------
Г |- X<:T

that captures exactly this pattern of variable lookup followed by transitivity, and showing that replacing the transitivity and variable rules by this one does not change the set of derivable subtyping statements.

These changes lead us to the algorithmic subtype relation for kernel F<:, shown below. We add an arrowhead to the turnstile symbol in algorithmic typing statements so that we can distinguish them from original typing statements in discussions involving both.

Г |-> S<:Top    (SA-TOP)

Г |-> X<:X      (SA-REFL-TVAR)

X<:U <- Г    Г |-> U<:T
----------------------    (SA-TRANS-TVAR)
Г |-> X<:T

Г |-> T1<:S1    Г |-> S2<:T2
--------------------------    (SA-ARROW)
Г |-> S1->S2 <: T1->T2

Г,X<:U1 |-> S2<:T2
---------------------------   (SA-ALL)
Г |-> "X<:U1.S2 <: "X<:U1.T2

The fact that the new SA-REFL-TVAR and SA-TRANS-TVAR rules are sufficient replacements for the old reflexivity and transitivity rules is captured by the next two lemmas.

Lemma [Reflexivity of the Algorithmic Subtype Relation]: Г |-> T<:T is provable for every Г and T.

Lemma [Transitivity of the Algorithmic Subtype Relation]: If Г |-> S<:Q and Г |-> Q<:T, then Г |-> S<:T.

Theorem [Soundness and Completeness of Algorithmic Subtyping]: Г |- S<:T iff Г |-> S<:T

Finally, we need to check that the subtyping rules define an algorithm that is total - i.e., that terminates on all inputs. We do this by assigning a weight to each subtyping statement and checking that the algorithmic rules all have conclusions with strictly greater weight than their premises.

Definition: The weight of a type T in a context Г, written weightГ(T), is defined as follows:

  weightГ(X)         = weightГ1(U) + 1, if Г = Г1,X<:U,Г2
  weightГ(Top)       = 1
  weightГ(T1->T2)    = weightГ(T1) + weightГ(T2) + 1
  weightГ("X<:T1.T2) = weightГ,X<:T1(T2) + 1

The weight of a subtyping statement Г |- S<:T is the maximum weight of S and T in Г.

Theorem: The subtyping algorithm terminates on all inputs.

Corollary: Subtyping in kernel F<: is decidable.


Subtyping in Full F<:
---------------------

Г |-> S<:Top    (SA-TOP)

Г |-> X<:X      (SA-REFL-TVAR)

X<:U <- Г    Г |-> U<:T
-----------------------    (SA-TRANS-TVAR)
Г |-> X<:T

Г |-> T1<:S1    Г |-> S2<:T2
--------------------------    (SA-ARROW)
Г |-> S1->S2 <: T1->T2

Г |-> T1<:S1    Г,X<:T1 |-> S2<:T2
----------------------------------   (SA-ALL)
Г |-> "X<:S1.S2 <: "X<:T1.T2


Lemma [Permutation and Weakening]:
  1. Suppose that Δ is a well-formed permutation of Г. If Г |-> S<:T, then Δ |-> S<:T.
  2. If Г |-> S<:T and dom(Δ) ∩ dom(Г) = , then Г,Δ |-> S<:T.

Lemma [Transitivity and Narrowing for Full F<:]:
  1.  If Г |-> S<:Q and Г |-> Q<:T, then Г |-> S<:T.
  2.  If Г,X<:Q,Δ |-> M<:N and Г |-> P<:Q then Г,X<:P,Δ |-> M<:N.


Undecidability of Full F<:
--------------------------

We established in the previous section that the algorithmic subtyping rules for full F<: are sound and complete - that is, that the smallest relation closed under these rules contains the same statements as the smallest relation closed under the original declarative rules. This leaves the question of whether an algorithm implementing these rules terminates on all inputs. Unfortunately - and, to many people at the time this was discovered, quite surprisingly - it does not.

Definition: ¬S =def= "X<:S.X

The crucial property of the ¬ operator is that it allows the left-and right-hand sides of subtyping statements to be swapped.

Fact: Г |- ¬S <: ¬T iff Г |- T <: S.

Now define: T  =  "X<:Top. ¬("Y<:X.¬Y), T will diverge.

Worse yet, not only does this particular algorithm fail to terminate on some inputs, it can be shown (Pierce, 1994) that there is no algorithm that is sound and complete for the original full F<: subtype relation and that terminates on all inputs. 

Theorem: For each two-counter machine M, there exists a subtyping statement S(M) such that S(M) is derivable in full F<: iff the execution of M halts.

Thus, if we could decide whether any subtype statement is provable, then we could also decide whether any given two-counter machine will eventually halt. Since the halting problem for two-counter machines is undecidable (cf. Hopcroft and Ullman, 1979), so is the subtyping problem for full F<:.

We should emphasize, again, that the undecidability of the subtype relation does not imply that the semi-algorithm for subtyping developed is either unsound or incomplete. If the statement Г |- S <: T is provable according to the declarative subtyping rules, then the algorithm will definitely terminate and yield true. If Г |- S <: T is not provable according to the declarative subtyping rules, then the algorithm will either diverge or yield false. The point is that a given subtyping statement may fail to be provable from the algorithmic rules in two different ways: either by generating an infinite sequence of subgoals (meaning that there is no finite derivation with this conclusion) or else by leading to an obvious inconsistency like Top <: S->T. The subtyping algorithm can detect one of these cases, but not the other.

Does the undecidability of full F<:: mean that the system is useless in practice? Actually, it is generally held that the undecidability of F<:: is not, per se, a terribly serious deficiency. For one thing, it has been shown (Ghelli, 1995) that, in order to cause the subtype checker to diverge, we must present it with a goal with three quite special properties, each one of which is difficult to imagine programmers creating by accident. Also, there are a number of popular languages whose typechecking or type reconstruction problems are, in principle, either extremely expensive—like ML and Haskell or even undecidable, like C++ and λProlog (Felty, Gunter, Hannan, Miller, Nadathur, and Scedrov, 1988). In fact, experience has shown the lack of joins and meets mentioned to be a significantly more problematic shortcoming of full F<::than its undecidability.


Joins and Meets
---------------

A desirable property of languages with subtyping is the existence of a join for every pair of types S and T - that is, a type J that is minimal among all the common supertypes of S and T. We show in this section that the subtype relation of kernel F<: does indeed have a join for every S and T, as well as a meet for every S and T with at least one subtype in common, by giving algorithms for calculating them. On the other hand, both of these properties fail for full F<:.

We write Г |- S V T = J for "J is the join of S and T in context Г" and Г |- S ∧ T = M for "M is the meet of S and T in Г." The algorithms for calculating these relations are defined simultaneously in below. Note that some of the cases in each definition overlap; to read the definitions as deterministic algorithms, we stipulate that the first clause that applies is always chosen.

Г |- S V T = T, if Г |- S <: T
             S, if Г |- T <: S
             J, if S = X, X <: U <- Г, Г |- U V T = J
             J, if T = X, X <: U <- Г, Г |- S V U = J
             M1->J2, if S = S1->S2, T = T1->T2, Г |- S1 ∧ T1 = M1, Г |- S2 V T2 = J2
             "X<:U1.J2, if S = "X<:U1.S2, T = "X<:U1.T2, Г,X<:U1 |- S2 V T2 = J2
             Top, otherwise

Г |- S ∧ T = S, if Г |- S <: T
             T, if Г |- T <: S
             J1->M2, if S = S1->S2, T = T1->T2, Г |- S1 V T1 = J1, Г |- S2 ∧ T2 = M2
             "X<:U1.M2, if S = "X<:U1.S2, T = "X<:U1.T2, Г,X<:U1 |- S2 ∧ T2 = M2
             fail, otherwise

It is easy to check that V and ∧ are total functions, in the sense that V always returns a type and ∧ either returns a type or fails. We just observe that the total weight (see definition above) of S and T with respect to Г is always reduced in recursive calls.

Now let us verify that these definitions actually calculate joins and meets. The argument is divided into two parts: First we show that the calculated join is an upper bound of S and T and the meet (when it exists) is a lower bound; Then we show that the calculated join is less than every common upper bound of S and T and that the meet is greater than every common lower bound (and exists whenever S and T have a common lower bound).

Proposition: 1. If Г |- S V T = J, then Г |- S <: J and Г |- T <: J.
             2. If Г |- S ∧ T = M, then Г |- M <: S and Г |- M <: T.

Proposition: 1. If Г |- S <: V and Г |- T <: V, then Г |- S V T = J for some J with Г |- J <: V.
             2. If Г |- L <: S and Г |- L <: T, then Г |- S ∧ T = M for some M with Г |- L <: M.


Bounded Existentials
--------------------

To extend the kernel F<: typechecking algorithm to a language with existential types, we must deal with one additional subtlety. Recall the declarative elimination rule for existentials:

  Г |- t1:{$X,T12}    Г,X,x:T12 |- t2:T2
  --------------------------------------    T-UNPACK
  Г |- let {X,x}=t1 in t2:T2

We remarked that the type variable X appears in the context in which t2's type is calculated in the second premise but not in the context of the rule's conclusion. This means that the type T2 must not contain X free, since any free occurrences of X will be out of scope in the conclusion. We observed that the change in the context from premise t o conclusion corresponds to anegative shift of variable indices in T2, when we represent types in the nameless deBruijn format; this shift will fail if T2 happens to contain X free.

What are the implications of this observation for a minimal typing algorithm for a language with existentials? In particular, what should we do with an expression like t = let {X,x} = p in x, where p has type {$X,Nat->X}? The most natural type of the body x is Nat->X, which mentions the bound variable X. However, according to the declarative typing relation (with the subsumption rule), x also has the types Nat->Top and Top. Since neither of these mentions X, the whole term t can legally be assigned the types Nat->Top and Top in the declarative system. More generally, we are always free to promote the body of an unpacking expression to any type that does not involve the bound type variable X and then apply T-UNPACK. So, if we want our minimal typing algorithm to be complete, it should not simply fail when it encounters an unpacking expression where the minimal type T2 of the body contains a free occurrence of the bound variable X. Instead, it should try to promote T2 to some supertype that does not mention X. The key observation that we need to make this work is that the set of X-free supertypes of a given type always has a minimal element.

(The unpack rule to bounded existential is so complicated, check book if you're interested.)

For full F<: with bounded existentials, the situation is more problematic, as might be expected. Ghelli and Pierce (1998) give an example of a type T, a context Г, and a variable X such that the set of X-free supertypes T under Г has no minimal element. It immediately follows that the typing relation for this system lacks minimal types.


Bounded Quantification and the Bottom Type
------------------------------------------

The addition of a minimal Bot type somewhat complicates the metatheoretic properties of F<:. The reason for this is that, in a type of the form "X<:Bot.T, the variable X is actually a synonym for Bot inside T, since X is a subtype of Bot by assumption and Bot is a subtype of X by the rule S-BOT. This, in turn, means that pairs of types such as "X<:Bot.X->X and "X<:Bot.Bot->Bot are equivalent in the subtype relation, even though they are not syntactically identical. Moreover, if the ambient context contains the assumptions X<:Bot and Y<:Bot, then the types X->Y and Y->X are equivalent even though neither of them mentions Bot explicitly. Despite these difficulties, the essential properties of kernel F<: can still be established in the presence of Bot.
