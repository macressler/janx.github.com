Metatheory of Subtyping
=======================

The definition of the simply typed lambda-calculus with subtyping is not immediately suitable for implementation. Unlike the other calculi we have seen, the rules of this system are not syntax directed - they cannot just be "read from bottom to top" to yield a typechecking algorithm. The main culprits are the rules of subsumption (T-SUB) in the typing relation and transitivity (S-TRANS) in the subtype relation.

The reason T-SUB is problematic is that the term in its conclusion is specified as a bare metavariable t:

Г |- t:S    S <: T
------------------             T-SUB
Г |- t:T

Every other typing rule specifies a term of some specific form - T-ABS applies only to lambda-abstractions, T-VAR only to variables, etc. - while T-SUB can be applied to any kind of term. This means that, if we are given a term t whose type we are trying to calculate, it will always be possible to apply either T-SUB or the other rule whose conclusion matches the shape of t.

S-TRANS is problematic for the same reason—its conclusion overlaps with the conclusions of all the other rules.

S <: U    U <: T
----------------               S-TRANS
S <: T

Since S and T are bare metavariables, we can potentially use S-TRANS as the final rule in a derivation of any subtyping statement. Thus, a naive "bottom to top" implementation of the subtyping rules would never know whether to try using this rule or whether to try another rule whose more specific conclusion also matches the two types whose membership in the subtype relation we are trying to check.

There is one other problem with S-TRANS. Both of its premises mention the metavariable U, which does not appear in the conclusion. If we read the rule naively from bottom to top, it says that we should guess a type U and then attempt to show that S <: U and U <: T. Since there are an infinite number of Us that we could guess, this strategy has little hope of success.

The S-REFL rule also overlaps the conclusions of the other subtyping rules. This is less severe than the problems with T-SUB and S-TRANS: the reflexivity rule has no premises, so if it matches a subtyping statement we are trying to prove, we can succeed immediately. Still, it is another reason why the rules are not syntax directed.

The solution to all of these problems is to replace the ordinary (or declarative) subtyping and typing relations by two new relations, called the algorithmic subtyping and algorithmic typing relations, whose sets of inference rules are syntax directed. We then justify this switch by showing that the original subtyping and typing relations actually coincide with the algorithmic presentations: the statement S <: T is derivable from the algorithmic subtyping rules iff it is derivable from the declarative rules, and a term is typable by the algorithmic typing rules iff it is typable under the declarative rules.


Algorithmic Subtyping
---------------------

A crucial element of any implementation of a language with subtyping is an algorithm for checking whether one type is a subtype of another. This subtype checker will be called by the typechecker when, for example, it encounters an application t1 t2 where t1 has type T->U and t2 has type S. Its function is to decide whether the statement S <: T is derivable from the subtyping rules. It accomplishes this by checking whether (S, T) belongs to another relation, written |-> S <: T ("S is algorithmically a subtype of T"), which is defined in such a way that membership can be decided simply by following the structure of the types, and which contains the same pairs of types as the ordinary subtype relation. The significant difference between the declarative and algorithmic relations is that the algorithmic relation drops the S-TRANS and S-REFL rules.

To begin with, we need to reorganize the declarative system a little. As we before, we need to use transitivity to "paste together" subtyping derivations for records involving combinations of depth, width, and permutation subtyping. Before we can drop S-TRANS, we must first add a rule that bundles depth, width, and permutation subtyping into one:

{li,i<-1..n} belongs to {kj,j<-1..m}    kj=li implies Sj <: Ti
--------------------------------------------------------------    (S-RCD)
{kj:Sj,j<-1..m} <: {li:Ti,i<-1..n}

Lemma: If S <: T is derivable from the subtyping rules including S-RCDDEPTH, S-RCD-WIDTH, and S-RCD-PERM (but not S-RCD), then it can also be derived using S-RCD (and not S-RCDDEPTH, S-RCD-WIDTH, or S-RCD-PERM), and vice versa.

And we can prove the reflexivity and transitivity rules are inessential:

Lemma: 1. S <: S can be derived for every type S without using S-REFL.
       2. If S <: T is derivable, then it can be derived without using S-TRANS.  


The algorithmic subtyping relation is the least relation on types closed under the rules below:

|-> S <: Top    (SA-TOP)

{li,i<-1..n} belongs to {kj,j<-1..m}    if kj=li then |-> Sj <: Ti
------------------------------------------------------------------    (SA-RCD)
|-> {kj:Sj,j<-1..m} <: {li:Ti,i<-1..n}

|-> T1 <: S1    |-> S2 <: T2
----------------------------    (SA-ARROW)
|-> S1->S2 <: T1->T2

We say that the algorithmic rules are sound because every statement that can be derived from algorithmic rules can also be derived from the declarative rules (the algorithmic rules do not prove anything new), and complete because every statement that can be derived from the declarative rules can also be derived from the algorithmic rules (the algorithmic rules prove everything that could be proved before).

Proposition of Soundness and Completeness: S <: T iff |-> S <: T

Now the algorithmic rules, being syntax directed, can be read directly as an algorithm for checking the algorithmic subtype relation (and hence also the declarative subtype relation). In a more conventional pseudocode notation, the algorithm looks like this:

  subtype(S, T) = if T = Top, then true
                  else if S = S1->S2 and T = T1->T2 then subtype(T1, S1) ∧ subtype(S2, T2)
                  else if S = {kj:Sj,j<-1..m} and T = {li:Ti,i<-1..n} then  {li,i<-1..n} belongs to {kj,j<-1..m} ∧ for all i there is some j<-1..m with kj = li and subtype(Sj, Ti)
                  else false.

Finally, we need to verify that the algorithmic subtype relation is total - i.e., that the recursive function subtype derived from the algorithmic rules returns either true or false, for every pair of inputs, after a finite amount of time.

Proposition of Termination: If |-> S <: T is derivable, then subtype(S, T) will return true. If not, then subtype(S, T) will return false.

This theorem, together with the soundness and completeness of the algorithmic rules, essentially asserts that the subtype function is a decision procedure for the declarative subtype relation.


Algorithmic Typing
------------------

The only non-syntax-directed typing rule is T-SUB. We cannot simply delete the subsumption rule: we must first examine where it plays a critical role in typing and enrich the other typing rules to achieve the same effects in a more syntax-directed way.

Clearly, one critical use of subsumption is bridging gaps between the types expected by functions and the actual types of their arguments. A term like (λr:{x:Nat}. r.x) {x=0,y=1} is not typable without subsumption. Perhaps surprisingly, this is the only situation where subsumption plays a crucial role in typing. In every other case where subsumption is used in a typing proof, the same statement can be proved by a different derivation in which subsumption is "postponed" by moving it down the tree toward the root. To see why this works, it is instructive to experiment a little with typing derivations involving subsumption, taking each typing rule in turn and thinking about how a derivation ending with this rule can be reorganized if one of its immediate subderivations ends with T-SUB.

So we see that the use of subsumption for promoting the result type of an application can be moved down past the T-APP rule, but that the use of subsumption for matching the argument type and the domain type of the function cannot be eliminated. It can be moved from one premise to the other - we can promote the type of the argument to match the domain of the function, or we can promote the type of the function (by demoting its argument type) so that it expects an argument of the type we actually plan to give it-but we cannot get rid of the subsumption altogether. This observation corresponds precisely with our intuition that this gap-bridging use of subsumption is essential to the power of the system.

By applying these transformations repeatedly, we can rewrite an arbitrary typing derivation into a special form where T-SUB appears in only two places: at the end of right-hand subderivations of applications, and at the very end of the whole derivation. Moreover, if we simply delete the one at the very end, no great harm will result: we will still have a derivation assigning a type to the same term - the only difference is that the type assigned to this term may be a smaller (i.e., better!) one. This leaves just one place, applications, where uses of subsumption can still occur. To deal with this case, we can replace the application rule by a slightly more powerful one

Г |- t1:T11->T12    Г |- t2:T2    T2 <: T11
-------------------------------------------
Г |- t1 t2:T12

incorporating a single instance of subsumption as a premise. Every subderivation of the form application-preceded-by-subsumption can be replaced by a use of this rule, which leaves us with no uses of T-SUB at all. Moreover, the enriched application rule is syntax directed: the shape of the term in the conclusion prevents it from overlapping with the other rules.

This transformation yields a syntax-directed set of typing rules that assigns types to the same terms as the original typing rules. These rules are summarized in the following definition. As we did for the algorithmic subtyping rules, we write the algorithmic relation with a funny turnstile, Г |-> t:T, to distinguish it from the declarative relation:

The algorithmic typing relation is the least relation closed under the rules below. The premise T1 = T11->T12 in the application rule is simply an explicit reminder of the sequencing of operations during typechecking: first we calculate a type T1 for t1; then we check that T1 has the form T11->T12, etc. The rule would have exactly the same force if we dropped this premise and instead wrote the first premise as Г |-> t1:T11->T12. Similarly for TA-PROJ. Also, the subtyping premise in the application rule is written with a funny turnstile; since we know that the algorithmic and declarative presentations of subtyping are equivalent, this choice is a matter of taste.

x:T <- Г
---------    TA-VAR
Г |-> x:T

Г,x:T1 |-> t2:T2
---------------------    TA-ABS
Г |-> λx:T1.t2:T1->T2

Г |-> t1:T1    T1=T11->T12    Г |-> t2:T2    Г |-> T2 <: T11
------------------------------------------------------------    TA-APP
Г |-> t1 t2:T12

for each i Г |-> ti:Ti
-------------------------------------    TA-RCD
Г |-> {l1=t1...ln=tn}:{l1:T1...ln:Tn}

Г |-> t1:R1    R1 = {l1:T1...ln:Tn}
------------------------------------    TA-PROJ
Г |-> t1.li:Ti

The soundness property is unchanged: every typing statement that can be derived from the algorithmic rules also follows from the declarative rules: if Г |-> t:T, then Г |- t:T.

Completeness, though, looks a little different. The ordinary typing relation can be used to assign many types to a term, while the algorithmic typing relation assigns at most one (as can easily be checked). So a straightforward converse of soundness property is clearly not going to hold. Instead, we can show that if a term t has a type T under the ordinary typing rules, then it has a better type S under the algorithmic rules, in the sense that S <: T. In other words, the algorithmic rules assign each typable term its smallest possible (minimal) type. The completeness theorem is often called the Minimal Typing theorem, since it amounts to showing that each typable term in the declarative system has a minimal type: if Г |- t:T, then Г |-> t:S for some S <: T.
