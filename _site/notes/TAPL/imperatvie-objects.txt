What is Object-Oriented Programming?
------------------------------------

1. Multiple representations. Perhaps the most basic characteristic of the object-oriented style is that, when an operation is invoked on an object, the object itself determines what code gets executed. Two objects responding to the same set of operations (i.e., with the same interface) may use entirely different representations, as long as each carries with it an implementation of the operations that works with its particular representation. These implementations are called the object's methods. Invoking an operation on an object-called method invocation or, more colorfully, sending it a message-involves looking up the operation's name at run time in a method table associated with the object, a process called dynamic dispatch.

By contrast, a conventional abstract data type (ADT) consists of a set of values plus a single implementation of the operations on these values. (This static definition of implementations has both advantages and disadvantages over objects)

2. Encapsulation. The internal representation of an object is generally hidden from view outside of the object's definition: only the object's own methods can directly inspect or manipulate its fields. This means that changes to the internal representation of an object can affect only a small, easily identifiable region of the program; this constraint greatly improves the readability and maintainability of large systems.  

Abstract data types offer a similar form of encapsulation, ensuring that the concrete representation of their values is visible only within a certain scope (e.g., a module, or an ADT definition), and that code outside of this scope can manipulate these values only by invoking operations defined within this privileged scope.

3. Subtyping. The type of an object - its interface - is just the set of names and types of its operations. The object's internal representation does not appear in its type, since it does not affect the set of things that we can directly do with the object.

Object interfaces fit naturally into the subtype relation. If an object satisfies an interface I, then it clearly also satisfies any interface J that lists fewer operations than I, since any context that expects a J-object can invoke only J-operations on it and so providing an I-object should always be safe. (Thus, object subtyping is similar to record subtyping. Indeed, for the model of objects developed in this chapter, they will be the same thing.) The ability to ignore parts of an object's interface allows us to write a single piece of code that manipulates many different sorts of objects in a uniform way, demanding only a certain common set of operations.

4. Inheritance. Objects that share parts of their interfaces will also often share some behaviors, and we would like to implement these common behaviors just once. Most object-oriented languages achieve this reuse of behaviors via structures called classes - templates from which objects can be instantiated - and a mechanism of subclassing that allows new classes to be derived from old ones by adding implementations for new methods and, when necessary, selectively overriding implementations of old methods. (Instead of classes, some object-oriented languages use a mechanism called delegation, which combines the features of objects and classes.)

5. Open recursion. Another handy feature offered by most languages with objects and classes is the ability for one method body to invoke another method of the same object via a special variable called self or, in some languages, this. The special behavior of self is that it is late-bound, allowing a method defined in one class to invoke another method that is defined later, in some subclass of the first.


Objects
-------

In its simplest form, an object is just a data structure encapsulating some internal state and offering access to this state to clients via a collection of methods. The internal state is typically organized as a number of mutable instance variables (or fields) that are shared among the methods and inaccessible to the rest of the program.

Jan: state is shared between methods, so it must be *mutable*; methods is just for accessing states, remember Java Bean?

Our running example throughout the chapter will be objects representing simple counters. Each counter object holds a single number and provides two methods (i.e., responds to two messages) - get, which causes it to return its current value; and inc, which increments the value.

A straightforward way of obtaining this behavior using the features we have discussed in previous chapters is to use a reference cell for the object's internal state and a record of functions for the methods. A counter object whose current state is 1 looks like this:

  c = let x = ref 1 in
      {get = λ_:Unit. !x, inc = λ_:Unit. x:=succ(!x)};
  > c : {get:Unit->Nat, inc:Unit->Unit}

The method bodies are both written as functions with trivial parameters (written _ because we don't need to refer to them in the bodies). The abstractions block evaluation of the method bodies when the object is created, allowing the bodies to be evaluated repeatedly, later, by applying them over and over to the unit argument. Also, note how the state of this object is shared among the methods and inaccessible to the rest of the program: the encapsulation of the state arises directly from the lexical scope of the variable x.

To invoke a method of the object c, we just extract a field of the record and apply it to an appropriate argument. For example:

  c.inc unit;
  > unit : Unit

  c.get unit;
  > 2 : Nat

  (c.inc unit; c.inc unit; c.get unit);
  > 4 : Nat

The fact that the inc method returns unit allows us to use the ;-notation for sequences of increments. We could equivalently have written the last line above as:

  let _ = c.inc unit in let _ = c.inc unit in c.get unit;

Since we may want to create and manipulate many counters, it is convenient to introduce an abbreviation for their type:

  Counter = {get:Unit->Nat, inc:Unit->Unit};

Our attention in this chapter is focused on how objects are built, rather than on how they are used in organizing larger programs. However, we do want to see at least one function that uses objects, so that we can verify that it works on objects with different internal representations. Here is a trivial one (Jan: a test) - a function that takes a counter object and invokes its inc method three times:

  inc3 = λc:Counter. (c.inc unit; c.inc unit; c.inc unit);
  > inc3 : Counter->Unit

  (inc3 c; c.get unit);
  > 7 : Nat

We have seen how to build individual counter objects, one at a time. It is equally easy to write a counter generator—a function that creates and returns a new counter every time it is called.

  newCounter = λ_:Unit. let x = ref 1 in
                        {get = λ_:Unit. !x, inc = λ_:Unit. x:=succ(!x)};
  > newCounter : Unit->Counter

One of the reasons for the popularity of object-oriented programming styles is that they permit objects of many shapes to be manipulated by the same client code. For example, suppose that, in addition to the Counter objects defined above, we also create some objects with an additional method that allows them to be reset to their initial state (say, 1) at any time.

  ResetCounter = {get:Unit->Nat, inc:Unit->Unit, reset:Unit->Unit};
  newResetCounter = λ_:Unit. let x = ref 1 in
                             {get   = λ_:Unit. !x, inc   = λ_:Unit. x:=succ(!x), reset = λ_:Unit. x:=1};
  > newResetCounter : Unit->ResetCounter

Since ResetCounter has all the fields of Counter (plus one more), the record subtyping rule tells us that ResetCounter <: Counter. This means that client functions like inc3 that take counters as arguments can also safely be used with reset counters:

  rc = newResetCounter unit;
  > rc : ResetCounter

  (inc3 rc; rc.reset unit; inc3 rc; rc.get unit);
  > 4 : Nat

So far, the states of our objects have consisted of just a single reference cell. Obviously, more interesting objects will often have several instance variables. In the sections that follow, it will be useful to be able to manipulate all of these instance variables as a single unit. To allow for this, let's change the internal representation of our counters to be a record of reference cells, and refer to instance variables in method bodies by projecting fields from this record.

  c = let r = {x=ref 1} in
      {get = λ_:Unit. !(r.x), inc = λ_:Unit. r.x:=succ(!(r.x))};
  > c : Counter

The type of this record of instance variables is called the representation type of the object.

  CounterRep = {x: Ref Nat};


Simple Classes
--------------

The definitions of newCounter and newResetCounter are identical except for the reset method in the latter. Of course, both of these definitions are so short anyway that this makes little difference, but if we imagine them stretching over many pages, as can easily happen in practice, it is clear that we would prefer to have some means for describing the common functionality in one place. The mechanism by which this is achieved in most object-oriented languages is called classes.

The class mechanisms in real-world object-oriented languages tend to be complex and loaded with features-self, super, visibility annotations, static fields and methods, inner classes, friend classes, annotations such as final and Serializable, etc., etc. The main reason for all this complexity is that, in most of these languages, classes are the only large-scale structuring mechanism. Indeed, there is just one widely used language-OCaml-that provides both classes and a sophisticated module system. So classes in most languages tend to become the dumping ground for all language features that have anything to do with large-scale program structure. We'll ignore most of these here and focus our attention on the most basic aspects of classes: code reuse via inheritance, and the late binding of self. For the moment, let's consider just the former.

* In its most primitive form, a class is simply a data structure holding a collection of methods that can either be instantiated to yield a fresh object or extended to yield another class. *

Why can't we just reuse the methods from some counter object to build a reset counter? Simply because, in any particular counter object, the method bodies contain references to some particular record of instance variables. Clearly, if we want to be able to reuse the same code with a different record of instance variables, what we need to do is to abstract the methods with respect to the instance variables. This amounts to breaking our newCounter function above into two pieces, one that defines the method bodies with respect to an arbitrary record of instance variables,

  counterClass =
    λr:CounterRep.
      {get = λ_:Unit. !(r.x),
       inc = λ_:Unit. r.x:=succ(!(r.x))};
  > counterClass : CounterRep->Counter

and one that allocates a record of instance variables and supplies it to the method bodies to create an object:

  newCounter = λ_:Unit. let r = {x=ref 1} in counterClass r;
  > newCounter : Unit->Counter

The method bodies from counterClass can be reused to define new classes, called subclasses. For example, we can define a class of reset counters:

  resetCounterClass =
    λr:CounterRep.
      let super = counterClass r in
      {get   = super.get,
       inc   = super.inc,
       reset = λ_:Unit. r.x:=1};
  > resetCounterClass : CounterRep->ResetCounter

Like counterClass, this function takes a record of instance variables and returns an object. Internally, it works by first using counterClass to create a counter object with the same record of instance variables r; this "parent object" is bound to the variable super. It then builds a new object by copying the get and inc fields from super and supplying a new function as the value for the reset field. Since super was built on r, all three methods share the same instance variables.

To build a reset counter object, we again just allocate memory for its instance variables and call resetCounterClass, where the real work happens.

  newResetCounter = λ_:Unit. let r = {x=ref 1} in resetCounterClass r;
  > newResetCounter : Unit->ResetCounter

*** We should emphasize that these classes are values, not types. *** Also we can, if we like, create many classes that generate objects of exactly the same type. In mainstream object-oriented languages like C++ and , classes have a more complex status-they are used both as compile-time types and as run-time data structures. This point is discussed further in §19.3.

It happens that our counter and reset counter objects use exactly the same internal representation. However, in general a subclass may need to extend not only the methods but also the instance variables of the superclass from which it is derived. For example, suppose we want to define a class of "backup counters" whose reset method resets their state to whatever value it has when we last called the method backup, instead of resetting it to a constant value:

  BackupCounter = {get:Unit->Nat, inc:Unit->Unit, reset:Unit->Unit, backup: Unit->Unit};

To implement backup counters, we need an extra instance variable to store the backed-up value of the state.

  BackupCounterRep = {x: Ref Nat, b: Ref Nat};

Just as we derived resetCounterClass from counterClass by copying the get and inc methods and adding reset, we derive backupCounterClass from resetCounterClass by copying get and inc and providing reset and backup.

  backupCounterClass =
    λr:BackupCounterRep.
      let super = resetCounterClass r in
         {get    = super.get,
          inc    = super.inc,
          reset  = λ_:Unit. r.x:=!(r.b),
          backup = λ_:Unit. r.b:=!(r.x)};
  > backupCounterClass : BackupCounterRep->BackupCounter

Two things are interesting about this definition. First, although the parent object super includes a method reset, we chose to write a fresh implementation because we wanted a different behavior. The new class overrides the reset method of the superclass. Second, subtyping is used in an essential way here in typing the expression that builds super: resetCounterClass expects an argument of type CounterRep, which is a supertype of the actual type, BackupCounterRep, of the argument r. In other words, we are actually providing the parent object with a larger record of instance variables than its methods require.

The variable super has been used to copy functionality from superclasses into new subclasses. We can also use super in the bodies of method definitions to extend the superclass's behavior with something extra. Suppose, for instance, that we want a variant of our backupCounter class in which every call to the inc method is automatically preceded by a call to backup. (Goodness knows why such a class would be useful—it's just an example.)

  funnyBackupCounterClass =
    λr:BackupCounterRep.
      let super = backupCounterClass r in
         {get = super.get,
          inc = λ_:Unit. (super.backup unit; super.inc unit),
          reset = super.reset,
          backup = super.backup};
  > funnyBackupCounterClass : BackupCounterRep->BackupCounter

Note how the calls to super.inc and super.backup in the new definition of inc avoid repeating the superclass's code for inc or backup here. In larger examples, the savings of duplicated functionality in such situations can be substantial.
