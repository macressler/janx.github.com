Simply Typed Lambda Calculus ============================ Because pure lambda-calculus is Turing complete, there's no hope of giving an exact type analysis for lambda terms. e.g.  
  if <long and tricky computation> then true else (λx.x)

You can't determine the result is true or (λx.x) unless you run it. (halting problem)


Function Types
--------------

Introduce a type named '->' for functions is naturally, but it's too conservative: functions like λx.true and λx.λy.y are lumped together in the same type ->, ignoring the fact that applying the first to true yields a boolean, while applying the second to true yields another function. In general, in order to give a useful type to the result of an application, we need to know more about the left-hand side than just that it is a function: we need to know what type the function returns. Moreover, in order to be sure that the function will behave correctly when it is called, we need to keep track of what type of arguments it expects. To keep track of this information, we replace the bare type -> by an INFINITE FAMILY OF TYPES of the form T1->T2, each classifying functions that expect arguments of type T1 and return results of type T2.

Definition:

  T    ::=        types
           Bool   type of booleans
           T->T   type of functions

The type constructor -> is right-associative—that is, the expression T1->T2->T3 stands for T1->(T2->T3).


The Typing Relation
-------------------

In order to assign a type to an abstraction like λx.t, we need to calculate what will happen when the abstraction is applied to some argument. The next question that arises is: how do we know what type of arguments to expect? There are two possible responses: either we can simply annotate the λ-abstraction with the intended type of its arguments, or else we can analyze the body of the abstraction to see how the argument is used and try to deduce, from this, what type it should have. For now, we choose the first alternative. Instead of just λx.t, we will write λx:T1.t2, where the annotation on the bound variable tells us to assume that the argument will be of type T1.

In general, languages in which type annotations in terms are used to help guide the typechecker are called explicitly typed. Languages in which we ask the typechecker to infer or reconstruct this information are called implicitly typed. (In the λ-calculus literature, the term type-assignment systems is also used.) 

Formally, a typing context (also called a type environment) Г is a sequence of variables and their types, and the "comma" operator extends Г by adding a new binding on the right. The empty context is sometimes written /, but usually we just omit it, writing |- t : T for "The closed term t has type T under the empty set of assumptions."

To avoid confusion between the new binding and any bindings that may already appear in Г, we require that the name x be chosen so that it is distinct from the variables bound by Г. Since our convention is that variables bound by λ-abstractions may be renamed whenever convenient, this condition can always be satisfied by renaming the bound variable if necessary. Г can thus be thought of as a finite function from variables to their types. Following this intuition, we write dom(Г) for the set of variables bound by Г.

Rules:

  Г,x:T1 |- t2:T2
  ----------------------           (T-ABS)
  Г |- λx:T1.t2 : T1->T2

  x:T <- Г
  --------                         (T-VAR, The premise x:T <- Г is read "The type assumed for x in Г is T.)
  Г |- x:T

  Г |- t1:T11->T12  Г |- t2:T11
  -----------------------------    (T-APP)
  Г |- t1 t2 : T12

These're the pure simply typed lambda-calculus with no base types, the seperate rules for base type booleans in presented in previous chapter. A pure simply typed lambda-calculus with no base types is actually degenerate, in the sense that it has no well-typed terms at all.


Properties of Typing
--------------------

* Lemma: Inversion of Typing Relation (a collection of observations about how typing derivations are built: the clauses for each syntactic form tells us "if a term of this form is well typed, then its subterm must have types of these forms ..")

  1. If Г |- x:R, then x:R <- Г
  2. If Г |- λx:T1.t2:R, then R = T1 -> R2 for some R2 with Г, x:T1 |- t2:R2
  3. If Г |- t1 t2:R, then there is some type T11 such that Г |- t1:T11 -> R and Г |- t2:T11
  4. if Г |- true:R, then R = Bool
  5. if Г |- false:R, then R = Bool
  6. if Г |- if t1 then t2 else t3:R, then Г |- t1:Bool and Г |- t2,t3:R

* Theorem: Uniqueness of Types (one-to-one mapping of term and its typing derivation)

In a given typing context Г, a term t (with free variables all in the domain of Г) has at most one type. That is, if a term is typable, then its type is unique. Moreover, there is just one derivation of this typing built from the inference rules that generate the typing relation.

* Canonical Forms Lemma

  1. If v is a value of type Bool, then v is either true of false
  2. If v is a value of type T1 -> T2, then v = λx:T1.t2

* Progress Theorem: Suppose t is a closed, well-typed term (that is, |- t:T for some T). Then either t is a value or else there is some t' with t -> t'

* Permutation Lemma: if Г |- t:T and delta (a triangle symbol) is a permutation of Г, then delta |- t:T. Moreover, the latter derivation has the same depth as the former.

* Weakening Lemma: if Г |- t:T and x not belongs to dom(Г), then Г,x:S |- t:T. Moreover, the latter derivation has the same depth as the former.

* Lemma: Preservation of Types Under Substitution (the substitution lemma)

If Г,x:S |- t:T and Г |- s:S, then Г |- [x |-> s]t:T

* Preservation Theorem: If Г |- t:T and t -> t', then Г |- t':T


The Curry-Howard Correspondence
-------------------------------

The "->" type constructor comes with typing rules of two kinds:

  1.  an introduction rule (T-ABS) describing how elements of the type can be created, and
  2.  an elimination rule (T-APP) describing how elements of the type can be used.  

When an introduction form (λ) is an immediate subterm of an elimination form (application), the result is a redex—an opportunity for computation. The terminology of introduction and elimination forms is frequently useful in discussing type systems. When we come to more complex systems later in the book, we'll see a similar pattern of linked introduction and elimination rules for each type constructor we consider.

The introduction/elimination terminology arises from a connection between type theory and logic known as the Curry-Howard correspondence or Curry-Howard isomorphism.

LOGIC                                           PROGRAMMING LANGUAGES

propositions                                    types
proposition P (向左倒下的U) Q                   type P -> Q
proposition P ∧ Q                               type P × Q
proof of proposition P                          term t of type P
proposition P is provable                       type P is inhabited (by some term)


Erasure and Typability
----------------------

Although type annotations play no role in evaluation — we don't do any sort of run-time checking to ensure that functions are applied to arguments of appropriate types — we do carry along these annotations inside of terms as we evaluate them.

Most compilers for full-scale programming languages actually avoid carrying annotations at run time: they are used during typechecking (and during code generation, in more sophisticated compilers), but do not appear in the compiled form of the program. In effect, programs are converted back to an untyped form before they are evaluated. This style of semantics can be formalized using an erasure function mapping simply typed terms into the corresponding untyped terms.

* Erase function

The erasure of a simply typed term t is defined as follows:

  erase(x) = x
  erase(λx:T1. t2) = λx. erase(t2)
  erase(t1 t2) = erase(t1) erase(t2)

Of course, we expect that the two ways of presenting the semantics of the simply typed calculus actually coincide: it doesn't really matter whether we evaluate a typed term directly, or whether we erase it and evaluate the underlying untyped term. This expectation is formalized by the following theorem, summarized by the slogan "evaluation commutes with erasure" in the sense that these operations can be performed in either order — we reach the same term by evaluating and then erasing as we do by erasing and then evaluating:

  1.  If t -> t′ under the typed evaluation relation, then erase(t) -> erase(t′).
  2.  If erase(t) -> m′ under the typed evaluation relation, then there is a simply typed term t′ such that t → t′ and erase(t′) = m′.  

A term m in the untyped lambda-calculus is said to be typable in λ-> if there are some simply typed term t, type T, and context Г such that erase(t) = m and Г |- t : T.


Curry-style and Church-style
----------------------------

We have seen two different styles in which the semantics of the simply typed lambda-calculus can be formulated: as an evaluation relation defined directly on the syntax of the simply typed calculus, or as a compilation to an untyped calculus plus an evaluation relation on untyped terms. An important commonality of the two styles is that, in both, it makes sense to talk about the behavior of a term t, whether or not t is actually well typed. This form of language definition is often called Curry-style. We first define the terms, then define a semantics showing how they behave, then give a type system that rejects some terms whose behaviors we don't like. Semantics is prior to typing.

A rather different way of organizing a language definition is to define terms, then identify the well-typed terms, then give semantics just to these. In these so-called Church-style systems, typing is prior to semantics: we never even ask the question "what is the behavior of an ill-typed term?" Indeed, strictly speaking, what we actually evaluate in Church-style systems is typing derivations, not terms. (See §15.6 for an example of this.)

Historically, implicitly typed presentations of lambda-calculi are often given in the Curry style, while Church-style presentations are common only for explicitly typed systems. This has led to some confusion of terminology: "Church-style" is sometimes used when describing an explicitly typed syntax and "Curry-style" for implicitly typed.
