Metatheory of Recursive Types
=============================


Induction and Coinduction
-------------------------

Assume we have fixed some universal set U as the domain of discourse for our inductive and coinductive definitions. U represents the set of "everything in the world," and the role of an inductive or coinductive definition will be to pick out some subset of U. (Later on, we are going to choose U to be the set of all pairs of types, so that subsets of U are relations on types. For the present discussion, an arbitrary set U will do.)

A function F := P(U) -> P(U) is monotone if X belongs to Y implies F(X) belongs to F(Y). (Recall that P(U) is the set of all subsets of U.) In the following, we assume that F is some monotone function on P(U). We often refer to F as a generating function.

Let X be a subset of U.

  1. X is F-closed if F(X) belongs to X
  2. X is F-consistent if X belongs to F(X).
  3. X is a fixed point of F if F(X) = X.

A useful intuition for these definitions is to think of the elements of U as some sort of statements or assertions, and of F as representing a "justification" relation that, given some set of statements (premises), tells us what new statements (conclusions) follow from them. An F-closed set, then, is one that cannot be made any bigger by adding elements justified by F-it already contains all the conclusions that are justified by its members. An F-consistent set, on the other hand, is one that is "self-justifying": every assertion in it is justified by other assertions that are also in it. A fixed point of F is a set that is both closed and consistent: it includes all the justifications required by its members, all the conclusions that follow from its members, and nothing else.

Consider the following generating function on the three-element universe U = {a, b, c}:

  E1(ø) = {c}      E1({a,b}) = {c}      E1 ({a}) = {c}       E1({a,c}) = {b,c}
  E1({b}) = {c}    E1({b,c}) = {a,b,c}  E1({c}) = {b,c}      E1({a,b,c}) = {a,b,c}
  
There is just one E1-closed set-{a,b,c} - and four E1-consistent sets-ø, {c}, {b, c}, {a, b, c}.

Knaster-Tarski Theorem:

  1. The intersection of all F-closed sets is the least fixed point of F.
  2. The union of all F-consistent sets is the greatest fixed point of F.

The least fixed point of F is written μF. The greatest fixed point of F is written vF. For the sample generating function E1 shown above, we have μE1 = vE1 = {a, b, c}.

Note that μF itself is F-closed (hence, it is the smallest F-closed set) and that vF is F-consistent (hence, it is the largest F-consistent set). This observation gives us a pair of fundamental reasoning tools:

  1. Principle of induction: If X is F-closed, then μF belongs to X.
  2. Principle of coinduction: If X is F-consistent, then X belongs to vF.

The intuition behind these principles comes from thinking of the set X as a predicate, represented as its characteristic set-the subset of U for which the predicate is true; showing that property X holds of an element x is the same as showing that x is in the set X. Now, the induction principle says that any property whose characteristic set is closed under F (i.e., the property is preserved by F) is true of all the elements of the inductively defined set μF.

The coinduction principle, on the other hand, gives us a method for establishing that an element x is in the coinductively defined set vF. To show x <- vF, it suffices to find a set X such that x <- X and X is F-consistent. Although it is a little less familiar than induction, the principle of coinduction is central to many areas of computer science; for example, it is the main proof technique in theories of concurrency based on bisimulation, and it lies at the heart of many model checking algorithms.


Finite and Infinite Types
-------------------------

We are going to instantiate the general definitions of greatest fixed points and the coinductive proof method with the specifics of subtyping. Before we can do this, though, we need to show precisely how to view types as (finite or infinite) trees.

For brevity, we deal in this chapter with just three type constructors: ->, ×, and Top. We represent types as (possibly infinite) trees with nodes labeled by one of the symbols ->, ×, or Top. The definition is specialized to our present needs.

We write {1, 2}* for the set of sequences of 1s and 2s. Recall that the empty sequence is written *, and i^k stands for k copies of i. If π and σ are sequences, then π,σ denotes the concatenation of π and σ.

Definition:

A tree type (or, simply, a tree) is a partial function T := {1, 2}* -> {->, ×, Top} satisfying the following constraints:

    * T(*) is defined;
    * if T(π,σ) is defined then T(π) is defined;
    * if T(π) = -> or T(π) = × then T(π,1) and T(π,2) are defined;
    * if T(π) = Top then T(π,1) and T(π,2) are undefined.

A tree type T is finite if dom(T) is finite. The set of all tree types is written (italic)T ; the subset of all finite tree types is written (italic)Tf.

(Jan: {1,2}* represents the path to leaf, {->,x} represents the value of internal node, {Top} represents value of leaf. so T is a function that defined a type for every path)

For notational convenience, we write Top for the tree T with T(*) = Top. When T1 and T2 are trees, we write T1 × T2 for the tree with (T1 × T2)(*) = × and (T1 × T2)(i, π) = Ti(π) and T1 -> T2 for the tree with (T1 -> T2)(*) = -> and (T1 -> T2)(i,π) = Ti(π), for i = 1,2. For example, (Top × Top) -> Top denotes the finite tree type T defined by the function with T(*) = -> and T(1) = × and T(2) = T(1,1) = T(1,2) = Top. We use ellipses informally for describing non-finite tree types. For example, Top->(Top->(Top->...)) corresponds to the type T defined by T(2^k) = ->, for all k ≥ 0, and T(2^k,1) = Top, for all k ≥ 0.

The set of finite tree types can be defined more compactly by a grammar:

  T  ::=  Top
          T × T
          T -> T

Formally, Tf is the least fixed point of the generating function described by the grammar. The universe of this generating function is the set of all finite and infinite trees labeled with Top, ->, and × (i.e., the set formed by generalizing Definition 21.2.1 by dropping its two last conditions). The whole set T can be derived from the same generating function by taking the greatest fixed point instead of the least.


Subtyping
---------

We define subtype relations on finite tree types and on tree types in general as least and greatest fixed points, respectively, of monotone functions on certain universes. For subtyping on finite tree types the universe is the set Tf × Tf of pairs of finite tree types; our generating function will map subsets of this universe - that is, relations on Tf - to other subsets, and their fixed points will also be relations on Tf. For subtyping on arbitrary (finite or infinite) trees, the universe is T × T.

* Definition of Finite Subtyping

Two finite tree types S and T are in the subtype relation ("S is a subtype of T") if (S, T) <- μSf , where the monotone function Sf := P(Tf × Tf) -> P(Tf × Tf) is defined by

    Sf(R) = {(T, Top) | T <- Tf}
          U {(S1 × S2, T1 × T2) | (S1, T1), (S2, T2) <- R}
          U {(S1 -> S2, T1 -> T2) | (T1, S1), (S2, T2) <- R}.

This generating function precisely captures the effect of the standard definition of the subtype relation by a collection of inference rules:

(Jan: S is an induction function, that get all inducted subtyping relations based on known subtyping relations)

--------
T <: Top

S1 <: T1    S2 <: T2
--------------------
S1 x S2 <: T1 x T2

T1 <: S1    S2 <: T2
--------------------
S1 -> S2 <: T1 -> T2

The statement S <: T above the line in the second and third rules should be read as "if the pair (S, T) is in the argument to Sf" and below the line as "then (S, T) is in the result."

* Definition of Infinite Subtyping

Two (finite or infinite) tree types S and T are in the subtype relation if (S, T) <- vS, where S := P(T × T) -> P(T × T) is defined by:

  *  S(R) = {(T, Top) | T <- T}
          U {(S1 × S2, T1 × T2) | (S1, T1), (S2, T2) <- R}
          U {(S1 -> S2, T1 -> T2) | (T1, S1), (S2, T2) <- R}.

Note that the inference rule presentation of this relation is precisely the same as for the inductive relation above: all that changes is that we consider a larger universe of types and take a greatest instead of a least fixed point.


One fundamental property of the subtype relation on infinite tree types - the fact that it is transitive - should be verified right away. (We have already seen before that subtyping on finite types is transitive.) If the subtype relation were not transitive, the critical property of preservation of types under evaluation would immediately fail. To see this, suppose that there were types S, T, and U with S<:T and T<:U but not S<:U. Let s be a value of type S and f a function of type U->Top. Then the term (λx:T. f x) s could be typed, using the rule of subsumption once for each application, but this term reduces in one step to the ill-typed term f s.

* Definition

A relation R belongs to U × U is transitive if R is closed under the monotone function TR(R) = {(x, y) | $z <- U. (x, z), (z, y) <- R} - i.e., if TR(R) belongs to R.

Lemma: Let F := P(U×U) -> P(U×U) be a monotone function. If TR(F(R)) belongs to F(TR(R)) for any R belongs to U × U, then vF is transitive.

Theorem: vS is transitive.


Transitivity
------------

(Jan: I don't understand the whole shit below until my another comment. Damn, why I'm so dumb.)

We saw before that standard formulations of inductively defined subtype relations generally come in two forms: a declarative presentation that is optimized for readability and an algorithmic presentation that corresponds more or less directly to an implementation. In simple systems, the two presentations are fairly similar; in more complex systems, they can be quite different, and proving that they define the same relation on types can pose a significant challenge. (We will see an example of this in Chapter 28; many others have been studied.)

One of the most distinctive differences between declarative and algorithmic presentations is that declarative presentations include an explicit rule of transitivity—if S<:U and U<:T then S<:T—while algorithmic systems do not. This rule is useless in an algorithm, since applying it in a goal-directed manner would involve guessing U.

The rule of transitivity plays two useful roles in declarative systems. First, it makes it obvious to the reader that the subtype relation is, indeed, transitive. Second, transitivity often allows other rules to be stated in simpler, more primitive forms; in algorithmic presentations, these simple rules need to be combined into heavier mega-rules that take into account all possible combinations of the simpler ones. For example, in the presence of transitivity, the rules for "depth subtyping" within record fields, "width subtyping" by adding new fields, and "permutation" of fields can be stated separately, making them all easier to understand, as we did before. Without transitivity, the three rules must be merged into a single one that takes width, depth, and permutation into account all at once, as we did in §16.1.

Somewhat surprisingly, the possibility of giving a declarative presentation with the rule of transitivity turns out to be a consequence of a "trick" that can be played with inductive, but not coinductive, definitions. To see why, observe that the property of transitivity is a closure property—it demands that the subtype relation be closed under the transitivity rule. Since the subtype relation for finite types is itself defined as the closure of a set of rules, we can achieve closure under transitivity simply by adding it to the other rules. This is a general property of inductive definitions and closure properties: the union of two sets of rules, when applied inductively, generates the least relation that is closed under both sets of rules separately. This fact can be formulated more abstractly in terms of generating functions:

Proposition: Suppose F and G are monotone functions, and let H(X) = F(X)ÈG(X). Then μH is the smallest set that is both F-closed and G-closed.

Proof: First, we show that μH is closed under both F and G. By definition, μH = H(μH) = F(μH) È G(μH), so F(μH) ⊆ μH and G(μH) ⊆ μH. Second, we show that μH is the least set closed under both F and G. Suppose there is some set X such that F(X) ⊆ X and G(X) ⊆ X. Then H(X) = F(X)ÈG(X) È X, that is, X is H-closed. Since μH is the least H-closed set (by the Knaster-Tarski theorem), we have μH ⊆ X.

Unfortunately, this trick for achieving transitive closure does not work when we are dealing with coinductive definitions. As the following exercise shows, adding transitivity to the rules generating a coinductively defined relation always gives us a degenerate relation.


Membership Checking
-------------------

We now turn our attention to the central question of the chapter: how to decide, given a generating function F on some universe U and an element x <- U, whether or not x falls in the greatest fixed point of F. Membership checking for least fixed points is addressed more briefly.

(Jan: so if we have a subtyping generating function F on TxT, we will know whether T1<T2, by checking if (T1,T2) is in F's greatest fixed point)

A given element x <- U can, in general, be generated by F in many ways. That is, there can be more than one set X included by U such that x <- F(X). Call any such set X a generating set for x. Because of the monotonicity of F, any superset of a generating set for x is also a generating set for x, so it makes sense to restrict our attention to minimal generating sets. Going one step further, we can focus on the class of "invertible" generating functions, where each x has at most one minimal generating set.

A generating function F is said to be invertible if, for all x <- U, the collection of sets

  Gx = {X included by U | x <- F(X)}

either is empty or contains a unique member that is a subset of all the others. When F is invertible, the partial function supportF := U -> P(U) is defined as follows:

  supportF(x) = X, if X <- Gx and X included by any X' <- Gx
                ↑, if Gx is empty

(Jan: supportF(x) returns the minimal generating set of x)

The support function is lifted to sets as follows:

  supportF(X) = Union of supportF(x), where x <- X, if supportF(x) for any x <- X is not empty
                ↑, otherwise

Our goal is to develop algorithms for checking membership in the least and greatest fixed points of a generating function F. The basic steps in these algorithms will involve "running F backwards": to check membership for an element x, we need to ask how x could have been generated by F. The advantage of an invertible F is that there is at most one way to generate a given x. For a non-invertible F, elements can be generated in multiple ways, leading to a combinatorial explosion in the number of paths that the algorithm must explore. From now on, we restrict our attention to invertible generating functions.

An element x is F-supported if supportF(x)↓; otherwise, x is F-unsupported. An F-supported element is called F-ground if supportF(x) = ø.

Note that an unsupported element x does not appear in F(X) for any X, while a ground x is in F(X) for every X.

An invertible function can be visualized as a support graph. For example, Figure 21-2 defines a function E on the universe {a, b, c, d, e, f, g, h, i} by showing which elements are needed to support a given element of the universe: for a given x, the set supportE(x) contains every y for which there is an arrow from x to y. An unsupported element is denoted by a slashed circle. In this example, i is the only unsupported element and g is the only ground element. (Note that, according to our definition, h is supported, even though its support set includes an unsupported element.)

(Jan: unsupported element need the slashed circle mark to distinguish itself from a ground element)

Thinking about the graph above suggests the idea that an element x is in the greatest fixed point iff no unsupported element is reachable from x in the support graph. This suggests an algorithmic strategy for checking whether x is in vF: enumerate all elements reachable from x via the support function; return failure if an unsupported element occurs in the enumeration; otherwise, succeed. Observe, however, that there can be cycles of reachability between the elements, and the enumeration procedure must take some precautions against falling into an infinite loop. We will pursue this idea for the remainder of this section.

Suppose F is an invertible generating function. Define the boolean-valued function gfpF (or just gfp) as follows:

    *  gfp(X) = if support(X)↑, then false
                else if support(X) included by X, then true
                else gfp(support(X) U X).

Intuitively, gfp starts from X and keeps enriching it using support until either it becomes consistent or else an unsupported element is found. We extend gfp to individual elements by taking gfp(x) = gfp({x}).

Another observation that can be made from Figure above is that an element x of vF is not a member of μF if x participates in a cycle in the support graph (or if there is a path from x to an element that participates in a cycle). Is the converse also true—that is, if x is a member of vF but not μF, is it necessarily the case that x leads to a cycle?

Lemma: X included by F(Y) iff supportF(X)↓ and supportF(X) included by Y.

Lemma: Suppose P is a fixed point of F. Then X included by P iff supportF(X)↓ and supportF(X) included by P.

Theorem:    1. If gfpF(X) = true, then X included by vF.
            2. If gfpF(X) = false, then X not included by vF.


Given an invertible generating function F and an element x <- U, the set predF(x) (or just pred(x)) of immediate predecessors of x is

  pred(x) = empty, if support(x)↑
            support(x) if support(x)↓

and its extension to sets X included by U is

  pred(X) = Union of pred(x) for x <- X

The set reachableF(X) (or just reachable(X)) of all elements reachable from a set X via support is defined as

  reachable(X) = Union of pred^n(X) for n >= 0

and its extension to single elements x <- U is

  reachable(x) = reachable({x}).

An element y <- U is reachable from an element x if y <- reachable(x).

An invertible generating function F is said to be finite state if reachable(x) is finite for each x <- U. For a finite-state generating function, the search space explored by gfp is finite and gfp always terminates:

Theorem: If reachableF(X) is finite, then gfpF(X) is defined. Consequently, if F is finite state, then gfpF(X) terminates for any finite X included by U.


More Efficient Algorithm
------------------------

We can refine the algorithm to eliminate this redundant recomputation by maintaining a set A of assumptions whose support sets have already been considered and a set X of goals whose support has not yet been considered.

Suppose F is an invertible generating function. Define the function gfpaF (or just gfpa) as follows (the superscript "a" is for "assumptions"):

    gfpa(A, X) = if support(X) ↑, then false 
                 else if X = ø, then true
                 else gfpa(A U X, support(X) \ (A È X)).

In order to check x <- vF, compute gfpa(ø, {x}).

Theorem: 1. If supportF(A) included by A U X and gfpaF(A, X) = true, then A U X included by vF.
         2. If gfpaF(A, X) = false, then X is not included by vF.


Regular Trees
-------------

At this point, we have developed generic algorithms for checking membership in a set defined as the greatest fixed point of a generating function F, assuming that F is invertible and finite state; separately, we have shown how to define subtyping between infinite trees as the greatest fixed point of a particular generating function S. The obvious next step is to instantiate one of our algorithms with S. Of course, this concrete algorithm will not terminate on all inputs, since in general the set of states reachable from a given pair of infinite types can be infinite. But, as we shall see in this section, if we restrict ourselves to infinite types of a certain well-behaved form, so-called regular types, then the sets of reachable states will be guaranteed to remain finite and the subtype checking algorithm will always terminate.

A tree type S is a subtree of a tree type T if S = λσ. T(π,σ) for some π - that is, if the function S from paths to symbols can be obtained from the function T by adding some constant prefix π to the argument paths we give to T; the prefix π corresponds to the path from the root of T to the root of S. We write subtrees(T) for the set of all subtrees of T.

A tree type T Î T is regular if subtrees(T) is finite-i.e., if T has finitely many distinct subtrees. The set of regular tree types is written Tr.

Examples:

  1. Every finite tree type is regular; the number of distinct subtrees is at most the number of nodes. The number of distinct subtrees of a tree type can be strictly less than the number of nodes. For example, T = Top→(Top × Top) has five nodes but only three distinct subtrees (T itself, Top × Top, and Top).

  2. Some infinite tree types are regular. For example, the tree

    T = Top × (Top × (Top × ...))

  has just two distinct subtrees (T itself and Top).

  3. The tree type

    T = B × (A × (B × (A × (A × (B × (A × (A × (A × (B × ...)

  where pairs of consecutive Bs are separated by increasingly many As, is not regular. Because T is irregular, the set reachables(T, T) containing all the subtyping pairs needed to justify the statement T<:T is infinite.

The restriction Sr of the generating function S to regular tree types is finite state.

This means that we can obtain a decision procedure for the subtype relation on regular tree types by instantiating one of the membership algorithms with S. Naturally, for this to work in a practical implementation, regular trees must be represented by some finite structures. One such representation is μ-notation.


μ-Types
-------

This section develops the finite μ-notation, defines subtyping on μ-expressions, and establishes the correspondence between this notion of subtyping and the subtyping on tree types.

Let X range over a fixed countable set {X1, X2,...} of type variables. The set of raw μ-types is the set of expressions defined by the following grammar:

  T ::= X
        Top
        T × T
        T -> T
        μX.T

The syntactic operator μ is a binder, and gives rise, in the standard way, to notions of bound and free variables, closed raw μ-types, and equivalence of raw μ-types up to renaming of bound variables. FV(T) denotes the set of free variables of a raw μ-type T. The capture-avoiding substitution [X|->S]T of a raw μ-type S for free occurrences of X in a raw μ-type T is defined as usual.

Raw μ-types have to be restricted a little to achieve a tight correspondence with regular trees: we want to be able to "read off" a tree type as the infinite unfolding of a given μ-type, but there are raw μ-types that cannot be reasonably interpreted as representations of tree types. These types have subexpressions of the form μX.μX1...μXn.X, where the variables X1 through Xn are distinct from X. For example, consider T = μX.X. Unfolding of T gives T again, so we cannot read off any tree by unfolding T. This leads us to the following restriction.

A raw μ-type T is contractive if, for any subexpression of T of the form μX.μX1...μXn.S, the body S is not X. Equivalently, a raw μ-type is contractive if every occurrence of a μ-bound variable in the body is separated from its binder by at least one -> or ×.

A raw μ-type is called simply a μ-type if it is contractive. The set of μ-types is written Tm.

When T is a μ-type, we write μ-height(T) for the number of μ-bindings at the front of T.

The common understanding of μ-types as finite notation for infinite regular tree types is formalized by the following function.

The function treeof, mapping closed μ-types to tree types, is defined inductively as follows:

  treeof (Top)(*) = Top 
  treeof (T1->T2)(*) = ->
  treeof (T1->T2)(i,π) = treeof(Ti)(π)
  treeof(T1 × T2)(*) = ×
  treeof (T1 × T2)(i,π) = treeof(Ti)(π)
  treeof (μX.T)(π) = treeof([X |-> μX.T]T)(π)

To verify that this definition is proper (i.e., exhaustive and terminating), note the following:

  1. Every recursive use of treeof on the right-hand side reduces the lexicographic size of the pair(|π|, μ-height(T)): the cases for S->T and S × T reduce |π| and the case for μX.T preserves |π| but reduces μ-height(T).

  2. All recursive calls preserve contractiveness and closure of the argument types. In particular, the type μX.T is contractive and closed iff its unfolding [X |-> μX.]T is. This justifies the unfolding step in the definition of treeof (μX.T).

The treeof function is lifted to pairs of types by defining treeof (S, T) = (treeof (S), treeof (T)).

The subtype relation for tree types was defined before as the greatest fixed point of the generating function S. In the present section, we extended the syntax of types with μ-types, whose behavior is intuitively described by the rules of (right and left, correspondingly) μ-folding:

  S <: [X |-> μX.T]T
  ------------------
  S <: μX.T

  [X |-> μX.S]S <: T
  ------------------
  μX.S <: T
  
Formally, we define subtyping for μ-types by giving a generating function Sm, with three clauses identical to the definition of S and two additional clauses corresponding to the μ-folding rules.

Two μ-types S and T are said to be in the subtype relation if (S, T) <- vSm, where the monotone function Sm :: P(Tm × Tm) -> P(Tm × Tm) is defined by:

  Sm(R) = {(S, Top) | S <- Tm}
        U {(S1 × S2, T1 × T2) | (S1, T1), (S2, T2) <- R}
        U {S1->S2, T1->T2) | (T1, S1), (S2, T2) <- R}
        U {S, μX.T) | (S, [X |-> μX.T]T) <- R}
        U {(μX.S, T) | ([X |-> μX.S]S, T) <- R, T ≠ Top, and T ≠ μY.T1}.

Note that this definition does not embody precisely the μ-folding rules above: we have introduced an asymmetry between its final and penultimate clauses to make it invertible (otherwise, the clauses would overlap). However, as the next exercise shows, Sm generates the same subtype relation as the more natural generating function[4] Sd whose clauses exactly correspond to the inference rules.

Lemma: Suppose that R included by Tm × Tm is Sm-consistent. For any (S, T) <- R, there is some (S′, T′) <- R such that treeof(S′, T′) = treeof(S, T) and neither S′ nor T′ starts with μ.

Theorem: Let (S, T) <- Tm × Tm. Then (S, T) <- vSm iff treeof(S, T) <- vS.

The correspondence established by the theorem is a statement of soundness and completeness of subtyping between μ-types, as defined in this section, with respect to the ordinary subtype relation between infinite tree types, restricted to those tree types that can be represented by finite μ-expressions.

(The "d" in Sd is a reminder that the function is based on the "declarative" inference rules for μ-folding, in contrast to the "algorithmic" versions used in Sm.)
