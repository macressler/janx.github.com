Nameless Representation of Terms
================================

alpha-conversion works well for discussing basic concepts and for presenting proofs cleanly, but for building an implementation we need to choose a single representation for each term; in particular, we must decide how occurrences of variables are to be represented. There is more than one way to do this:

   1.  We can represent variables symbolically, as we have done so far, but replace the convention about implicit renaming of bound variables with an operation that explicitly replaces bound variables with "fresh" names during substitution as necessary to avoid capture.

   2.  We can represent variables symbolically, but introduce a general condition that the names of all bound variables must all be different from each other and from any free variables we may use. This convention (sometimes called the Barendregt convention) is more stringent than ours, since it does not allow renaming "on the fly" at arbitrary moments. However, it is not stable under substitution (or beta-reduction): since substitution involves copying the term being substituted, it is easy to construct examples where the result of substitution is a term in which some λ-abstractions have the same bound variable name. This implies that each evaluation step involving substitution must be followed by a step of renaming to restore the invariant.

   3.  We can devise some "canonical" representation of variables and terms that does not require renaming.

   4.  We can avoid substitution altogether by introducing mechanisms such as explicit substitutions (Abadi, Cardelli, Curien, and Lévy, 1991a).

   5.  We can avoid variables altogether by working in a language based directly on combinators, such as combinatory logic (Curry and Feys, 1958; Barendregt, 1984)-variant of the lambda-calculus based on combinators instead of procedural abstraction-or Backus' functional language FP (1978).

In TAPL we choose 3, based on the paper de Bruijn, Nicolas G. Lambda-calculus notation with nameless dummies: a tool for automatic formula manipulation with application to the Church-Rosser theorem. Indag. Math., 34(5):381–392, 1972.


Terms and Contexts
------------------

De Bruijn's idea was that we can represent terms more straightforwardly—if less readably—by making variable occurrences point directly to their binders, rather than referring to them by name. This can be accomplished by replacing named variables by natural numbers, where the number k stands for "the variable bound by the k'th enclosing λ." For example, the ordinary term λx.x corresponds to the nameless term λ.0, while λx.λy. x (y x) corresponds to λ.λ. 1 (0 1). Nameless terms are also sometimes called de Bruijn terms, and the numeric variables in them are called de Bruijn indices[2] Compiler writers use the term "static distances" for the same concept.

Formally, we define the syntax of nameless terms almost exactly like the syntax of ordinary terms (5.3.1). The only difference is that we need to keep careful track of how many free variables each term may contain. That is, we distinguish the sets of terms with no free variables (called the 0-terms), terms with at most one free variable (1-terms), and so on. Note combinator are all 0-terms.

* Formal definition of Term:

  Let T be the smallest family of sets {T0, T1, T2,...} such that

    1.  k belongs to Tn whenever 0 ≤ k < n; (variable k is a number, element of set Tn is n-terms)

    2.  if t1 belongs to Tn and n > 0, then λ.t1 belongs to Tn-1; (abstraction rule)

    3.  if t1 belongs to Tn and t2 belongs to Tn, then (t1 t2) belongs to Tn; (application rule)

The elements of Tn are terms with at most n free variables, numbered between 0 and n - 1: a given element of Tn need not have free variables with all these numbers, or indeed any free variables at all. When t is closed, for example, it will be an element of Tn for every n - in other words, any combinator is element of all Tn.

Note that each (closed) ordinary term has just one de Bruijn representation, and that two ordinary terms are equivalent modulo renaming of bound variables iff they have the same de Bruijn representation.

To deal with terms containing free variables, we need the idea of a naming context. For example, suppose we want to represent λx. y x as a nameless term. We know what to do with x, but we cannot see the binder for y, so it is not clear how "far away" it might be and we do not know what number to assign to it. The solution is to choose, once and for all, an assignment (called a naming context) of de Bruijn indices to free variables, and use this assignment consistently when we need to choose numbers for free variables. For example, suppose that we choose to work under the following naming context:

  Г = x |-> 4 
      y |-> 3 
      z |-> 2 
      a |-> 1 
      b |-> 0

Then x (y z) would be represented as 4 (3 2), while λw. y w would be represented as λ. 4 0 and λw.λa.x as λ.λ.6. Since the order in which the variables appear in Г determines their numerical indices, we can write it compactly as a sequence.

* Formal definition of Context:

  Suppose x0 through xn are variable names from v. The naming context Г = xn, xn-1, ... x1, x0 assigns to each xi the de Bruijn index i. Note that the rightmost variable in the sequence is given the index 0; this matches the way we count λ binders—from right to left—when converting a named term to nameless form. We write dom(Г) for the set {xn, ..., x0} of variable names mentioned in Г.


Shifting and Substitution
-------------------------

Shifting is an auxiliary operation which renumbers the indices of the free variables in a term. When a substitution goes under a λ-abstraction, as in [1 |-> s](λ.2) (i.e., [x |-> s](λy.x), assuming that 1 is the index of x in the outer context), the context in which the substitution is taking place becomes one variable longer than the original; we need to increment the indices of the free variables in s so that they keep referring to the same names in the new context as they did before. But we need to do this carefully: we can't just shift every variable index in s up by one, because this could also shift bound variables within s. For example, if s = 2 (λ.0) (i.e., s = z (λw.w), assuming 2 is the index of z in the outer context), we need to shift the 2 but not the 0. The shifting function below takes a "cutoff" parameter c that controls which variables should be shifted. It starts off at 0 (meaning all variables should be shifted) and gets incremented by one every time the shifting function goes through a binder. So, when calculating (here is a uparrow symbol, which has d as up label and c as down label, followed by (t), will write as ^(d,c)(t) from now on), we know that the term t comes from inside c-many binders in the original argument to ↑d. Therefore all identifiers k < c in t are bound in the original argument and should not be shifted, while identifiers k ≥ c in t are free and should be shifted.

* Formal definition of Shifting

The d-place shift of a term t above cutoff c, written ^(d,c)(t) , is defined as follows:

  1. ^(d,c)(k) = k if k < c, k + d if k >= c
  2. ^(d,c)(λ.t1) = λ.^(d,c+1)(t1)
  3. ^(d,c)(t1 t2) = ^(d,c)(t1) ^(d,c)(t2)

We write ^(d)(t) for ^(d,0)(t) .

* Formal definition of Substitution

The substitution of a term s for variable number j in a term t, written [j |-> s]t, is defined as follows:

  1. [j |-> s]k = s if k = j, k otherwise
  2. [j |-> s](λ.t1) = λ.[j+1 |-> ^(1)(s)]t1
  3. [j |-> s](t1 t2) = ([j |-> s]t1 [j |-> s]t2)


Evaluation
----------

To define the evaluation relation on nameless terms, the only thing we need to change (because it is the only place where variable names are mentioned) is the beta-reduction rule, which must now use our new nameless substitution operation.

The only slightly subtle point is that reducing a redex "uses up" the bound variable: when we reduce ((λx.t12) v2) to [x |-> v2]t12, the bound variable x disappears in the process. Thus, we will need to renumber the variables of the result of substitution to take into account the fact that x is no longer part of the context. For example:

    * (λ.1 0 2) (λ.0) -> 0 (λ.0) 1 (not 1 (λ.0) 2).

Similarly, we need to shift the variables in v2 up by one before substituting into t12, since t12 is defined in a larger context than v2. Taking these points into account, the beta-reduction rule looks like this:

    * (λ.t12) v2 -> ^(-1)([0 |-> ^1(v2)]t12)

The other rules are identical to what we had before. (see Formalities Operational Semantics section in untyped-lambda-calculus.txt)
