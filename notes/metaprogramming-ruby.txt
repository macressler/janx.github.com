# Metaprogramming Ruby #

Def a. Metaprogramming is writing code that writing code.

  This definition is too general - it includes static code generation techs, like compiler and generator.

Def b. Metaprogramming is writing code that manipulates language constructs at runtime.

  This is a much better definition, especially for metaprogramming in Ruby.


A program written in C spans two different worlds: compile time, where you have language constructs such as variables and functions, and runtime, where you just have a bunch of machine code. Since most information from compile time is lost at runtime, C doesn’t support metaprogramming or introspection. In C++, some language constructs do survive compilation, and that’s why you can ask a C++ object for its class. In Java, the distinction between compile time and runtime is even fuzzier. You have enough introspection available to list the methods of a class or climb up a chain of superclasses.

Ruby is arguably the most metaprogramming-friendly of the current fashionable languages. It has no compile time at all, and most constructs in a Ruby program are available at runtime. You don’t come up against a brick wall dividing the code that you’re writing from the code that your computer executes when you run the program. There is just one world.


Metaprogramming Techniques:
* Open Class
* Dynamic Dispatch (send)
* Pattern Dispatch (reflect, select, and send)
* Dynamic Method (define_method)
* Ghost Methods (method_missing)
* Dynamic Proxies (method_missing)
* undef_method and remove_method


## The Object Model ##

In Ruby there is no real distinction between code that defines a class and code of any other kind. You can put any code you want in a class definition, Ruby executed the code within the class just as it would execute any other code.

In a sense, the class keyword in Ruby is more like a scope operator than a class declaration. Yes, it does create classes that don’t yet exist, but you might argue that it does this as a side effect. For class, the core job is to move you in the context of the class, where you can define methods.

Unlike in Java or other static languages, in Ruby there is no connection between an object’s class and its instance variables. Instance variables just spring into existence when you assign them a value, so you can have objects of the same class that carry different sets of instance variables.

An object is composed of a bunch of instance variables and a link to a class. An object’s instance variables live in the object itself, and an object’s methods live in the object’s class.

Object#methods vs Class#instance_methods

Classes themselves are nothing but objects. The methods of an object are also the instance methods of its class. This means that the methods of a class are the instance methods of Class.

All classes ultimately inherit from Object, which in turn inherits from BasicObject, the root of the Ruby class hierarchy. (1.9)

A class is just a souped-up module with three additional methods - new(), allocate(), and superclass() - that allow you to create objects or arrange classes into hierarchies. Apart from these (admittedly important) differences, classes and modules are pretty much the same.

Using load(), variables fall out of scope when the file has finished loading, constants don’t. As a result, loaded file can pollute your program with the names of its own constants - in particular, class names. You can force the file to keep its constants to itself by passing a second, optional argument to load(): load('file.rb' , true)

If you load a file this way, Ruby creates an anonymous module, uses that module as a Namespace to contain all the constants from file.rb, and then destroys the module. The require() method is quite similar to load(), but it’s meant for a different purpose. You use load() to execute code, and you use require() to import libraries. That’s why require() has no second argument: those leftover class names are probably the reason why you imported the file in the first place.

What’s an object? It’s just a bunch of instance variables, plus a link to a class. The object’s methods don’t live in the object—they live in the object’s class, where they’re called the instance methods of the class.

What’s a class? It’s just an object (an instance of Class), plus a list of instance methods and a link to a superclass. Class is a subclass of Module, so a class is also a module.

When you call a method, Ruby does two things:

  1. It finds the method. This is a process called method lookup. To find a method, Ruby goes in the receiver’s class, and from there it climbs the ancestors chain until it finds the method. Because of the way most people draw diagrams, this behavior is also called the “one step to the right, then up” rule: go one step to the right into the receiver’s class, and then go up the ancestors chain until you find the method.

  2. It executes the method. To do that, Ruby needs something called self.

This process - find a method and then execute it - happens in every object-oriented language.

When you include a module in a class (or even in another module), Ruby plays a little trick. It creates an anonymous class that wraps the module and inserts the anonymous class in the chain, just above the including class itself. These “wrapper” classes are called include classes (or sometimes proxy classes). Include classes are a well-kept secret of Ruby. The superclass() method pretends that they don’t even exist, and in general you cannot access them from regular Ruby code.

Ruby includes some methods, such as print(), that you can call from anywhere in your code. It looks like each and every object has the print() method. The trick here is that class Object includes Kernel, so Kernel gets into every object’s ancestors chain. And since you’re always sitting inside an object, you can call the Kernel methods from anywhere. You can take advantage of this mechanism yourself: if you add a method to Kernel, this Kernel Method will be available to all objects.

(J: but you can't do foo.print, because now you specify a receiver and you're trying to call a public method :print!)

Every line of Ruby code is executed inside an object - the so–called current object. The current object is also known as self, because you can access it with the self keyword. Only one object can take the role of self at a given time, but no object holds that role for a long time. In particular, when you call a method, the receiver becomes self. From that moment on, all instance variables are instance variables of self, and all methods called without an explicit receiver are called on self. As soon as your code explicitly calls a method on some other object, that other object becomes self.

Usually the role of self is taken by the last object who received a method call. However, in a class or module definition (and outside of any meth- od), the role of self is taken by the class or module.

Private methods are governed by a single simple rule: you cannot call a private method with an explicit receiver. In other words, every time you call a private method, it must be on the implicit receiver - self.


## Methods ##

A message that’s processed by method_missing() looks like a regular call from the caller’s side but has no corresponding method on the receiver’s side. This is named a Ghost Method.

An object that catches Ghost Methods and forwards them to another object, maybe wrapping some logic around the call, is called a Dynamic Proxy.

(J: Override respond_to?() may be a good idea when you use method_missing(), but override methods() seems not a good idea. Note respond_to? is passive while methods() is positive)

There is a common problem with Ghost Methods: since unknown calls become calls to method_missing( ), your object might accept a call that’s just plain wrong. Finding a bug like this one in a large program can be pretty painful. To avoid this kind of trouble, don’t introduce more Ghost Methods than necessary.

Whenever the name of a Ghost Method clashes with the name of a real, inherited method, the latter wins. If you don’t need the inherited method, you can fix the problem by removing it. To stay on the safe side, you might want to remove most inherited methods from your proxies right away. The result is called a Blank Slate, a class that has fewer methods than the Object class itself.

This performance issue is something that you should be aware of, but usually it’s not really a problem. Avoid guesswork, and measure your code’s performance with a profiler before you start worrying too much about optimizations. If the performance of Ghost Methods ever turns out to be a problem, you can sometimes find a middle ground. For example, you might be able to arrange things so that the first call to a Ghost Method defines a Dynamic Method (68) for the next calls.

class BlankSlate
  # Hide the method named +name+ in the BlankSlate class. Don't
  # hide +instance_eval+ or any method beginning with "__".
  def self.hide(name)
    if instance_methods.include?(name.to_s) and
      name !~ /^(__|instance_eval)/
      @hidden_methods ||= {}
      @hidden_methods[name.to_sym] = instance_method(name)
      undef_method name
    end
  end

  instance_methods.each { |m| hide(m) }

  ...
end

Some of the methods in Object are used internally by Ruby. If you redefine or remove them, the language might break in subtle ways. To make this less likely to happen, Ruby identifies these methods with a leading double underscore and issues a warning if you mess with them. At the time of writing, Ruby has two such reserved methods, __send__() and __id__(), which are synonyms for send() and id(). Some libraries, such as Test::Unit, protect themselves from maverick client code by calling the reserved methods rather than their “regular” counterparts. In general, you don’t have to worry that much: just call the regular methods, unless you know for certain that they’ve been redefined.

Starting with Ruby 1.9, Blank Slates are an integral part of the language. In previous versions of Ruby, Object used to be the root of the class hierarchy. In Ruby 1.9, Object has a superclass named BasicObject that provides only a handful of essential methods:

  p BasicObject.instance_methods
  [:==, :equal?, :!, :!=, :instance_eval, :instance_exec, :__send__]

By default, classes still inherit from Object. Classes that inherit directly from BasicObject are automatically Blank Slates.


## Blocks ##

A block is not just a floating piece of code. You can’t run code in a vacuum. When code runs, it needs an environment: local variables, instance variables, self... Since these entities are basically names bound to objects, you can call them the bindings for short. The main point about blocks is that they are all inclusive and come ready to run. They contain both the code and a set of bindings. A computer scientist would say that a block is a closure. For the rest of us, this means a block captures the local bindings and carries them along with it.

Some languages, such as Java and C#, allow an “inner scope” to see variables from an “outer scope.” That kind of nested visibility doesn’t happen in Ruby, where scopes are sharply separated: as soon as you enter a new scope, the previous bindings are simply replaced by a new set of bindings.

There are exactly three places where a program leaves the previous scope behind and opens a new one:

  • Class definitions
  • Module definitions
  • Methods

Scope changes whenever the program enters (or exits) a class or module definition or a method. These three borders are marked by the keywords class, module, and def, respectively. Each of these keywords acts like a Scope Gate.

There is a subtle difference between class and module on one side and def on the other. The code in a class or module definition is executed immediately. Conversely, the code in a method definition is executed later, when you eventually call the method.

To pass scope gate:
* use Class.new instead of class keyword, capture variable in clojure and pass it to Class.new, Class.new accepts a block
* use Module#define_method instead of def keyword
* use Module.new instead of module keyword

If you replace Scope Gates with methods, you allow one scope to see variables from another scope. Technically, this trick should be called nested lexical scopes, but many Ruby coders refer to it simply as “flattening the scope,” meaning that the two scopes share variables as if the scopes were squeezed together. For short, you can call this spell a Flat Scope.

Once you know about Flat Scopes, you can do pretty much whatever you want with scopes. For example, assume that you want to share a variable among a few methods, and you don’t want anybody else to see that variable. You can do that by defining all the methods in the same Flat Scope as the variable:

  def define_methods
    shared = 0

    Kernel.send :define_method, :counter do
      shared
    end

    Kernel.send :define_method, :inc do |x|
      shared += x
    end
  end

  define_methods

  counter             # => 0
  inc(4)
  counter             # => 4

This smart way to control the sharing of variables is called a Shared Scope.

instance_eval() changes self, it leaves all the other bindings alone, you can call the block that you pass to instance_eval() a Context Probe, because it’s like a snippet of code that you dip inside an object to do something in there.

Ruby 1.9 introduced a method named instance_exec(). This is similar to instance_eval( ), but it also allows you to pass arguments to the block.

With a Context Probe, you can wreak havoc on encapsulation! Pragmatically, there are some situations where encapsulation just gets in your way. For one, you might want to take a quick peek inside an object from an irb command line. In a case like this, breaking into the object with instance_eval() is often the shortest route. The most socially acceptable reason to break encapsulation is arguably testing.

Sometimes you create an object just to evaluate blocks inside it. An object like that can be called a Clean Room:

  class CleanRoom
    def complex_calculation
       # ...
    end
    def do_something
       # ...
    end
  end

  clean_room = CleanRoom.new
  clean_room.instance_eval do
    if complex_calculation > 10
      do_something
    end
  end

A Clean Room is just an environment where you can evaluate your blocks, and it usually exposes a few useful methods that the block can call.

If you get to the bottom of it, using a block is a two-step process. First, you set some code aside, and second, you call the block (with yield) to execute the code. This “package code first, call it later” mechanism is not exclusive to blocks. There are at least three other places in Ruby where you can package code:

  • In a proc, which is basically a block turned object
  • In a lambda, which is a slight variation on a proc
  • In a method

Although most things in Ruby are objects, blocks are not. To solve this problem, Ruby provides the standard library class Proc. A Proc is a block that has been turned into an object. You can create a Proc by passing the block to Proc.new. Later, you can evaluate the block-turned-object with Proc#call(). This technique is called a Deferred Evaluation.

Ruby also provides two Kernel Methods that convert a block to a Proc: lambda() and proc(). In a short while, you’ll see that there are subtle differences between lambda(), proc(), and Proc.new(), but in most cases you can just use whichever one you like best.

The real meaning of the & is this: “This is a Proc that I want to use as a block.” Just drop the &, and you’ll be left with a Proc. You can prefix & at a proc object to convert it into a block.

Procs created with lambda() are called lambdas, while the others are simply called procs. Ruby 1.9 introduces a Proc#lambda?( ) method that returns true if the Proc is a lambda. Previous versions of Ruby didn’t provide a direct way to tell a lambda from a regular proc.

There are two differences between procs and lambdas. One has to do with the return keyword, and the other concerns the checking of arguments.

In a lambda, return just returns from the lambda. In a proc, rather than return from the proc, it returns from the scope where the proc itself was defined.

(J: thinking about it in a different way: proc consider return address (the code address where the proc is created) as part of binding, lambda don't.)

The second difference between procs and lambdas concerns the way they check their arguments. For example, a particular proc or lambda might have an Proc#arity of two, meaning that it accepts two arguments. Now, what happens if you call this callable object with three arguments or a single argument? The long answer to this question is complicated and littered with special cases.12 The short answer is that, in general, lambdas tend to be less tolerant than procs (and regular blocks) when it comes to arguments. Call a lambda with the wrong arity, and it fails with an ArgumentError. On the other hand, a proc fits the argument list to its own expectations. If there are too many arguments, a proc drops the excess arguments. If there are too few arguments, it assigns nil to the missing arguments.

Generally speaking, lambdas are more intuitive than procs because they’re more similar to methods. They’re pretty strict about arity, and they simply exit when you call return. For this reason, many Rubyists use lambdas as a first choice, unless they need the specific features of procs.

  callable = proc { return }
  callable.call # fails in Ruby 1.9

Distressingly, the previous code will either succeed or fail, depending on the version of Ruby you’re using. In Ruby 1.8, Kernel#proc() is actually a synonym for Kernel#lambda(). Because of loud protest from programmers, Ruby 1.9 made proc() a synonym for Proc.new() instead.

By calling Object#method(), you get the method itself as a Method object, which you can later execute with Method#call( ). A Method object is similar to a lambda, with an important difference: a lambda is evaluated in the scope it’s defined in (it’s a closure, remember?), while a Method is evaluated in the scope of its object.

You can detach a method from its object with Method#unbind(), which returns an UnboundMethod object. You can’t execute an UnboundMethod, but you can turn it back into a Method by binding it to an object. This technique works only if another_object has the same class as the method’s original object—otherwise, you’ll get an exception.

(J: to a method object, the object is its binding)

Finally, you can convert a Method object to a Proc object by calling Method#to_proc, and you can convert a block to a method with define_method().

Callable objects are snippets of code that you can evaluate, and they carry their own scope along with them: blocks, procs, lambdas, and methods.

Different callable objects exhibit subtly different behaviors. In methods and lambdas, return returns from the callable object, while in procs and blocks, return returns from the callable object’s original context. Different callable objects also react differently to calls with the wrong arity. Methods are stricter, lambdas are almost as strict (save for some corner cases), and procs and blocks are more tolerant.


## Class Definitions ##

Class definitions also return the value of the last statement, just like methods and blocks do.

In a class (or module) definition, the class itself takes the role of the current object self.

As you know, wherever you are in a Ruby program, you always have a current object: self. Likewise, you always have a current class (or module). When you define a method, that method becomes an instance method of the current class.

Although you can get a reference to the current object through self, there’s no equivalent keyword to get a reference to the current class. However, it’s not difficult to keep track of the current class just by looking at the code. Whenever you open a class with the class keyword (or a module with the module keyword), that class becomes the current class.

However, the class keyword has a limitation: it needs the name of a class. Unfortunately, in some situations you may not know the name of the class that you want to open. For example, think of a method that takes a class and adds a new instance method to it. How can you open the class if you don’t know its name? You need some way other than the class keyword to change the current class. Enter the class_eval() method.

  class MyClass
    def method_one
      def method_two; 'Hello!' ; end
    end
  end

  obj = MyClass.new
  obj.method_one
  obj.method_two     # => "Hello!"

Which class does method_two() belong to? Or, to ask the same question in a different way, which class is the current class when method_two() is defined? In this case, the current class cannot be the same as self, because self is not a class. Instead, the role of the current class is taken by the class of self: MyClass. The same principle applies if you’re at the top level of your program. In that situation, the current class is Object, the class of main. That’s why, if you define a method at the top level, that method becomes an instance method of Object.

Module#class_eval() is actually more flexible than class. You can use class_eval() on any variable that references the class, while class requires a constant. Also, class opens a new scope, losing sight of the current bindings, while class_eval( ) has a Flat Scope. This means you can reference variables from the outer scope in a class_eval() block.

The Ruby interpreter always keeps a reference to the current class (or module). All methods defined with def become instance methods of the current class.

In a class definition, the current class is the same as self - the class being defined.

If you have a reference to the class, you can open the class with class_eval() (or module_eval()).

When you assign an anonymous class to a constant, Ruby understands that you’re trying to give a name to the class, and it does something special: it turns around to the class and says, “Here’s your new name.” Now the constant references the Class, and the Class also references the constant. If it weren’t for this trick, a class wouldn’t be able to know its own name.

Class methods are Singleton Methods of a class.

class << object opens eigenclass. eigenclasses have only a single instance (that’s why they’re also called singleton classes), and they can’t be inherited. More important, an eigenclass is where an object’s Singleton Methods live.

instance_eval will set current class to the object's eigenclass, it's the second way to get eigenclass.

  obj.instance_eval:
    self  -> obj
    klass -> obj's eigenclass

  cls.class_eval:
    self  -> cls
    klass -> cls


7 Rules:
1. There is only one kind of object—be it a regular object or a module.
2. There is only one kind of module—be it a regular module, a class, an eigenclass, or a proxy class.
3. There is only one kind of method, and it lives in a module - most often in a class.
4. Every object, classes included, has its own “real class,” be it a regular class or an eigenclass.
5. Every class has exactly one superclass, with the exception of BasicObject (or Object if you’re using Ruby 1.8), which has none. This means you have a single ancestors chain from any class up to BasicObject.
6. The superclass of the eigenclass of an object is the object’s class. The superclass of the eigenclass of a class is the eigenclass of the class’s superclass.
7. When you call a method, Ruby goes “right” in the receiver’s real class and then “up” the ancestors chain. That’s all there is to know about the way Ruby finds methods.


Object#extend() is simply a shortcut that includes a module in the receiver’s eigenclass.

In alias, the new name for the method comes first, and the original name comes second. You can provide the names either as symbols or as plain names without a leading colon. (Most Rubyists would use a symbol.)

Note that alias is a keyword, not a method. That’s why there’s no comma between the two method names. Ruby also provides Module#alias_method(), a method equivalent to alias.

When you redefine a method, you don’t really change the method. Instead, you define a new method and attach an existing name to that new method. You can still call the old version of the method as long as you have another name that’s still attached to it.

Note that you can have different visibilities for different aliases. It’s the method name, not the method itself, that is either public or private.

You must be aware of two potential pitfalls when you use Around Alias:

First, Around Aliases are a form of Monkeypatching, and as such, they can break existing code. Look back at the last section. Although JCode redefines String#succ, it stops shy of redefining String#length - probably because that would break libraries that expect the “length” of a string to be its size in bytes. Instead, JCode defines a separate String#jlength( ) method to calculate the length of a Unicode string in characters. As usual, the more powerful the tricks you pull, the more testing of code you need to do!

The second potential problem has to do with loading. You should never load an Around Alias twice, unless you want to end up with an exception when you call the method.

Even if a class is just a special case of a module, many programmers think of classes as “more important” than modules. Old habits tend to linger, and most of us are used to seeing classes as the stars of the object-oriented show. Even Bill focused on classes for most of today’s examples.

However, all the concepts you learned today can be generalized from classes to modules. So, when Bill says that “you always have a current class,” that class might actually be a module; when he says that “you can define the instance variable of a class,” that doesn’t stop you from defining the instance variable of a module; when he says that you have “eigenclasses,” those could also be “eigenmodules,” and so on.


## Code That Writes Code ##

A Binding is a whole scope packaged as an object. The idea is that you can create a Binding to capture the local scope and carry it around. Later, you can execute code in that scope by using the Binding object in conjunction with eval(), instance_eval(), or class_eval().

You can create a Binding with the Kernel#binding( ) method:

  class MyClass
    def my_method
      @x = 1
      binding
    end
  end
  b = MyClass.new.my_method

You can evaluate code in the captured scope by passing the Binding as an additional argument to one of the eval*() methods:

  eval "@x" , b               # => 1

Ruby also provides a predefined constant named TOPLEVEL_BINDING, which is just a Binding of the top-level scope. You can use it to access the top-level scope from anywhere in your program:

  class AnotherClass
    def my_method
      eval "self" , TOPLEVEL_BINDING
    end
  end
  AnotherClass.new.my_method     # => main

In a sense, you can see Binding objects as a “purer” form of closures than blocks, because these objects contain a scope but don’t contain code.

While using irb, you can open a nested session that puts you in the context of a specific object and allows you to execute code there, pretty much like instance_eval( ) does. Just use the irb command:

  irb(main):001:0> s = "abc"
  => "abc"
  irb(main):002:0> irb s
  irb#1(abc):001:0> reverse
  => "cba"
  irb#1(abc):002:0> exit # leave the current context
  irb(main):003:0>

Look at the irb prompt. The object in parentheses is the current self, and the #1 postfix means you’re sitting one level deep into a nested irb session. While this nested session lasts, the object you passed to the irb command is the top-level self.

eval() always requires a string, instance_eval( ) and class_eval( ) can take either a String of Code or a block. This shouldn’t come as a big surprise. After all, code in a string is not that different from code in a block. Strings of Code can even access local variables like blocks do:

  array = ['a' , 'b' , 'c' ]
  x = 'd'
  array.instance_eval "self[1] = x"
  array   # => ["a", "d", "c"]

Because a block and a String of Code are so similar, in many cases you have the option of using either one. Which one should you choose? The short answer is that you should probably go for a block whenever you can, because Strings of Code have a number of downsides.

To start with, Strings of Code don’t always play well with your editor’s features, such as syntax coloring and autocompletion. Even when they do get along with everyone, Strings of Code tend to be difficult to read and modify. Also, Ruby won’t report a syntax error in a String of Code until that string is evaluated, potentially resulting in brittle programs that fail unexpectedly at runtime.

These annoyances are minor compared to the biggest issue with eval(): security. People can inject any code into a string to be evaluated.

You might parse all Strings of Code to identify operations that are potentially dangerous. This approach may prove ineffective, though, because there are so many possible ways to write malicious code. Trying to outsmart a determined hacker can be dangerous to both your computer and your ego.

When it comes to code injection, some strings are safer than others. Only strings that derive from an external source can contain malicious code, so you might simply limit your use of eval() to those strings that you wrote yourself. Again, this is easier said than done, because in a live system it can be surprisingly difficult to track which strings come from where.

With all these challenges, some programmers advocate banning eval() altogether. Programmers tend to be paranoid about anything that might possibly go wrong, so this eval() ban turns out to be a pretty popular choice. If you do away with eval(), you’ll have to look for alternate techniques on a case-by-case basis.

* Ruby's rescue: Tainted Object and Safe Levels

Ruby automatically marks potentially unsafe objects - in particular, objects that come from external sources - as tainted. Tainted objects include strings that your program reads from web forms, files, the command line, or even a system variable. Every time you create a new string by manipulating tainted strings, the result is itself tainted. Here’s an example program that checks whether an object is tainted by calling its tainted?() method:

  # read user input
  user_input = "User input: #{gets()}"
  puts user_input.tainted?

  > x = 1
  > true

If you had to check every string for taintedness, then you wouldn’t be in a much better position than if you had simply tracked unsafe strings on your own. But Ruby also provides the notion of safe levels, which complement tainted objects nicely. When you set a safe level (which you can do by assigning a value to the $SAFE global variable), you disallow certain potentially dangerous operations.

You can choose from five safe levels, from the default 0 (“hippie commune,” where you can hug trees and format hard disks) to 4 (“military dictatorship,” where you can’t even exit the program freely). A safe level of 2, for example, disallows most file-related operations. Note that any safe level greater than 0 also causes Ruby to flat-out refuse to evaluate tainted strings:

  $SAFE = 1
  user_input = "User input: #{gets()}"
  eval user_input

  > x = 1
  > SecurityError: Insecure operation - eval

To fine-tune safety, you can explicitly remove the taintedness on Strings of Code before you evaluate them (you can do that by calling Object#untaint()) and then rely on safe levels to disallow dangerous operations such as disk access.

Ruby has methods like Kernel#load() and Kernel#require() that take the name of a source file and execute code from that file. If you think about it, evaluating a file is not that different from evaluating a string. This means load() and require() are somewhat similar to eval(). Although these methods are not really part of the *eval() family, you can think of them as first cousins. You can usually control the content of your files, so you don’t have as many security concerns with load() and require() as you do with eval(). Still, safe levels higher than 1 do put some limitations on importing files. For example, a safe level of 2 or higher prevents you from using load() with a tainted filename.

By using safe levels carefully, you can write a controlled environment for eval(). Such an environment is called a Sandbox. Let’s take a look at a sandbox taken from a real-life library.

Safe levels are typically used in combination with other techniques, such as threads and Clean Rooms. By using safe levels carefully, you can write a controlled environment for eval(). Such an environment is called a Sandbox.

  class ERB
    def result(b=TOPLEVEL_BINDING)
      if @safe_level
      proc {
        $SAFE = @safe_level
        eval(@src, b, (@filename || '(erb)' ), 1)
      }.call
    else
      eval(@src, b, (@filename || '(erb)' ), 1)
    end
   end

The @src instance variable carries the content of a code tag, and the @safe_level instance variable contains the safe level required by the user. If no safe level is set, the content of the tag is simply evaluated. Otherwise, eRB builds a quick Sandbox: it makes sure that the global safe level is exactly what the user asked for and also creates a Clean Room to execute the code in a separate scope. (Note that the safe level is changed only within the proc, and it goes back to its former value after the proc has been called.)

(J: only $SAFE goes back to its former value after proc called, user defined global variable or $: doens't. weired)

The inherited() method is an instance method of Class, and Ruby calls it when a class is inherited. By default, Class#inherited() does nothing. A method such as Class#inherited() is called a Hook Method because you can use it to hook into a particular event.

Hook Methods:

  Class#inherited()
  Module#included()
  Module#extend_object()
  Module#method_added()
  Module#method_removed()
  Module#method_undefined()

These hooks only work for regular instance methods, which live in the object’s class. They don’t work for Singleton Methods, which live in the object’s eigenclass. To catch Singleton Method events, you can use Kernel#singleton_method_added(), singleton_method_removed(), and singleton_method_undefined().

The notion of hooks extends beyond specialized methods like Class#inherited() or Module#method_added(). Because most operations in Ruby are just regular methods, you can easily twist them into improvised Hook Methods.

For example, you learned how to override Module#included() to execute code when a module is included. But you can also plug into the same event, so to speak, from the other side: because you include a module with the include() method, instead of overriding Module#included( ), you can override Module#include() itself. For example:

  module M; end
  class C
    def self.include(*modules)
      puts "Called: C.include(#{modules})"
      super
    end
    include M
  end

  > Called: C.include(M)

There is an important difference between overriding Module#included() and overriding Module#include(). Module#included() exists solely to be used as a Hook Method, and its default implementation is empty. But Module#include() has some real work to do: it must actually include the module.

That’s why our hook’s code also should call the base implementation of Module#include() through super. If you forget super, you’ll still catch the event, but you won’t include the module anymore! As an alternative to overriding, you can turn a regular method into a Hook Method by using an Around Alias.


## Tradeoffs ##

Complexity for Beginners vs. Complexity for Experts: For an experienced Ruby coder, metaprogramming code can actually look simple and perfectly readable. Remember, though, that not everybody is as familiar with metaprogramming as you are. Resist the temptation to go wild with magic.

Internal Complexity vs. External Complexity: By making the insides of your code more complex, you make your library simpler for clients.

Complexity by Terseness vs. Complexity by Duplication

Complexity for Humans vs. Complexity for Tools


Both instance_variable_names() and protected_instance_variables() are defined by Rails. You might be wondering why Rails defines a method like Object#instance_variable_names() when Ruby already has Object#instance_variables(). There is some trickery going on here. Object#instance_variables() returns either strings or symbols depending on the version of Ruby that you’re using. But Rails’ instance_variable_names() always returns strings, making this code compatible with all versions of Ruby.

First, a Monkeypatch is global. If you change a method on String, all the strings in your system will see that method. Second, a Monkeypatch is invisible. Once you’ve redefined String#capitalize(), it’s difficult to notice that the method was changed. If your code, or a library that you’re using, relies on the original behavior of capitalize(), that code will break - and because Monkeypatches are global, you might have trouble spotting where the problem is and finding out which code modified which class.

One reason why Monkeypatches are dangerous is that they’re difficult to spot. If you make them a tad more visible, you’ll have an easier time tracking them. For example, instead of defining methods straight in the Open Class, you can define methods in a module and then include the module in the Open Class. At least this way you’ll be able to see the module among the Open Class’ ancestors.

Compared to testing regular code, testing metaprogramming code introduces an additional dimension. Remember, metaprogramming is “code that writes code,” so you might have to test it at two different levels: you need to test the code you write, and you should also test the code that your code writes.
